
----------------------------------------------------------------------------------

import React from 'react'
import { Text, View, StyleSheet, TouchableOpacity } from 'react-native'
// Files
import Z_Test_1_A from './Z_Test_1_A'
import Z_Test_2_A from './Z_Test_2_A'
// Navigation
import { NavigationContainer } from "@react-navigation/native";
import { createStackNavigator } from "@react-navigation/stack";
import Z_Test_3_A from './Z_Test_3_A';
import Z_Test_Part_1 from './Z_Test_Part_1';
import Z_Test_Part_2 from './Z_Test_Part_2';
import Z_Test_Part_3 from './Z_Test_Part_3';
import Z_Test_Part_D1 from './Z_Test_Part_D1';
import Z_Test_Part_D2 from './Z_Test_Part_D2';
import Z_Test_Part_D3 from './Z_Test_Part_D3';
import Z_Test_Part_D4 from './Z_Test_Part_D4';
import Z_Test_Part_D5 from './Z_Test_Part_D5';
import Z_Test_Part_D6 from './Z_Test_Part_D6';
import Z_Test_Part_D7 from './Z_Test_Part_D7';
import Z_Test_Part_D8 from './Z_Test_Part_D8';

// Constant Variable
const Stack = createStackNavigator();

export default function Z_Test_Parent_A() {
    // Main Body
    return (
        <NavigationContainer>
            <Stack.Navigator>
                {/* 1 */}
                <Stack.Screen component={Z_Test_1_A} name="Z_Test_1_A"
                    options={{ headerShown: false }} />
                {/* 2 */}
                <Stack.Screen component={Z_Test_2_A} name="Z_Test_2_A"
                    options={{ headerShown: false }} />
                {/* 3 */}
                <Stack.Screen component={Z_Test_3_A} name="Z_Test_3_A"
                    options={{ headerShown: false }} />
                {/* 4 */}
                <Stack.Screen component={Z_Test_Part_1} name="Z_Test_Part_1"
                    options={{ headerShown: false }} />
                {/* 5 */}
                <Stack.Screen component={Z_Test_Part_2} name="Z_Test_Part_2"
                    options={{ headerShown: false }} />
                {/* 6 */}
                <Stack.Screen component={Z_Test_Part_3} name="Z_Test_Part_3"
                    options={{ headerShown: false }} />
                {/* Documents Upload */}
                {/* 1 */}
                <Stack.Screen component={Z_Test_Part_D1} name="Z_Test_Part_D1"
                    options={{ headerShown: false }} />
                {/* 2 */}
                <Stack.Screen component={Z_Test_Part_D2} name="Z_Test_Part_D2"
                    options={{ headerShown: false }} />
                {/* 3 */}
                <Stack.Screen component={Z_Test_Part_D3} name="Z_Test_Part_D3"
                    options={{ headerShown: false }} />
                {/* 4 */}
                <Stack.Screen component={Z_Test_Part_D4} name="Z_Test_Part_D4"
                    options={{ headerShown: false }} />
                {/* 5 */}
                <Stack.Screen component={Z_Test_Part_D5} name="Z_Test_Part_D5"
                    options={{ headerShown: false }} />
                {/* 6 */}
                <Stack.Screen component={Z_Test_Part_D6} name="Z_Test_Part_D6"
                    options={{ headerShown: false }} />
                {/* 7 */}
                <Stack.Screen component={Z_Test_Part_D7} name="Z_Test_Part_D7"
                    options={{ headerShown: false }} />
                {/* 8 */}
                <Stack.Screen component={Z_Test_Part_D8} name="Z_Test_Part_D8"
                    options={{ headerShown: false }} />
            </Stack.Navigator>
        </NavigationContainer>
    )
}

----------------------------------------------------------------------------------

import React, { useState, useEffect } from 'react';
import { View, Text, TouchableOpacity, StyleSheet, TextInput, Keyboard, ScrollView } from 'react-native';
import { useNavigation } from '@react-navigation/native';
import { useFonts } from "expo-font";
// Firebase
import { firebase } from "../firestore";

export default function Z_Test_1_A() {
    // Navigation
    const navigation = useNavigation();
    // ----------- Backend Part Logic -----------
    const universityRef = firebase.firestore().collection("4 - Student Records");
    const [U1_universityName, setU1_universityName] = useState("");
    const [U2_campus, setU2_campus] = useState("");
    const [U3_intake, setU3_intake] = useState("");
    const [U4_courseName, setU4_courseName] = useState("");
    // Add Function
    const addData = () => {
        if (U1_universityName && U1_universityName.length > 0 && U2_campus && U3_intake && U4_courseName) {
            const data = {
                U1_universityName,
                U2_campus,
                U3_intake,
                U4_courseName,
            };
            const docRef = universityRef.doc(); // Create a new document with a random ID
            docRef
                .set(data)
                .then(() => {
                    // Pass the document ID to the next page
                    navigation.navigate("Z_Test_2_A", { documentId: docRef.id });
                    setU1_universityName("");
                    setU2_campus("");
                    setU3_intake("");
                    setU4_courseName("");
                    Keyboard.dismiss();
                })
                .catch((err) => {
                    alert(err);
                });
        }
    };
    // ----------- Backend Part Logic -----------
    // Fonts
    const [fontsLoaded, setFontsLoaded] = useState(false);
    let [loaded] = useFonts({
        Archivo: require("../../assets/fonts/My_Soul/ArchivoBlack-Regular.ttf"),
        Kanit: require("../../assets/fonts/My_Soul/Kanit-Light.ttf"),
        Heebo: require("../../assets/fonts/My_Soul/Heebo-Medium.ttf"),
        HeeboExtra: require("../../assets/fonts/My_Soul/Heebo-ExtraBold.ttf"),
        KanitBold: require("../../assets/fonts/My_Soul/Kanit-Bold.ttf"),
        KanitBlack: require("../../assets/fonts/My_Soul/Kanit-Black.ttf"),
    });
    useEffect(() => {
        if (loaded) {
            setFontsLoaded(true);
        }
    }, [loaded]);
    if (!fontsLoaded) {
        return null;
    }
    // Main Body
    return (
        <View>
            <ScrollView>
                {/* Heading */}
                <Text style={styles.Txt1}>1 - University Detail</Text>
                {/* --- Main Body --- */}
                {/* Text Input */}
                <Text style={styles.Detail_Txt}>1 - University Name :</Text>
                <TextInput
                    placeholder=' Enter University Name '
                    onChangeText={(text) => setU1_universityName(text)}
                    value={U1_universityName}
                    keyboardType="default"
                    style={styles.Inp_1}
                />
                {/* Text Input */}
                <Text style={styles.Detail_Txt}>2 - Campus :</Text>
                <TextInput
                    placeholder=' Enter Campus '
                    onChangeText={(text) => setU2_campus(text)}
                    value={U2_campus}
                    keyboardType="default"
                    style={styles.Inp_1}
                />
                {/* Text Input */}
                <Text style={styles.Detail_Txt}>3 - Intake :</Text>
                <TextInput
                    placeholder=' Enter Intake '
                    onChangeText={(text) => setU3_intake(text)}
                    value={U3_intake}
                    keyboardType="default"
                    style={styles.Inp_1}
                />
                {/* Text Input */}
                <Text style={styles.Detail_Txt}>4 - Course Name as per University Website :</Text>
                <TextInput
                    placeholder=' Enter Course '
                    onChangeText={(text) => setU4_courseName(text)}
                    value={U4_courseName}
                    keyboardType="default"
                    style={styles.Inp_1}
                />
                {/* ----- Button ----- */}
                {/* 1 Btn */}
                <TouchableOpacity style={styles.Btn_Parent} onPress={addData}>
                    <Text style={styles.Btn_Txt}>Add Data</Text>
                </TouchableOpacity>
            </ScrollView>
        </View>
    );
}

// CSS
const styles = StyleSheet.create({
    container: {
        flex: 1,
        alignItems: 'center',
        justifyContent: 'center',
    },
    Txt1: {
        borderWidth: 1,
        borderColor: "yellow",
        backgroundColor: "yellow",
        fontFamily: "KanitBold",
        paddingHorizontal: 10,
        paddingVertical: 10,
        textAlign: "center",
        letterSpacing: 1.5,
        fontSize: 20,
        marginVertical: 25,
    },
    Detail_Txt: {
        marginTop: 1.5,
        paddingHorizontal: 25,
        fontFamily: "Heebo",
        fontSize: 12,
        letterSpacing: 1,
    },
    Inp_1: {
        marginTop: 1,
        borderWidth: 0.5,
        borderColor: "black",
        marginHorizontal: 25,
        borderRadius: 8,
        paddingHorizontal: 10,
        letterSpacing: 1.5,
        fontSize: 12,
        fontFamily: "Kanit",
    },
    Btn_Parent: {
        paddingVertical: 2,
        backgroundColor: "red",
        marginVertical: 20,
        marginHorizontal: 15,
        borderRadius: 20,
    },
    Btn_Parent_1: {
        paddingVertical: 2,
        backgroundColor: "blue",
        marginVertical: 0,
        marginHorizontal: 15,
        borderRadius: 20,
    },
    Btn_Txt: {
        paddingVertical: 2,
        textAlign: "center",
        fontFamily: "HeeboExtra",
        fontSize: 16,
        color: "white",
        letterSpacing: 1,
    },
});

----------------------------------------------------------------------------------

import React, { useState, useEffect } from 'react';
import { View, Text, TouchableOpacity, StyleSheet, TextInput, Keyboard, ScrollView } from 'react-native';
import { useFonts } from "expo-font";
// Firebase
import { firebase } from "../firestore";
import { useNavigation, useRoute } from '@react-navigation/native';

export default function Z_Test_2_A() {
  // Navigation
  const navigation = useNavigation();
  // ----------- Backend Part Logic -----------
  // Get the document ID passed from the first page
  const route = useRoute();
  const { documentId } = route.params;
  // Firebase
  const personalDetailRef = firebase.firestore().collection("4 - Student Records").doc(documentId);
  const [P1_title, setP1_title] = useState("");
  const [P2_familyName, setP2_familyName] = useState("");
  const [P3_givenName, setP3_givenName] = useState("");
  const [P4_countryOfBirth, setP4_countryOfBirth] = useState("");
  const [P5_cityOfBirth, setP5_cityOfBirth] = useState("");
  const [P6_countryOfCitizenship, setP6_countryOfCitizenship] = useState("");
  const [P7_dualCitizen, setP7_dualCitizen] = useState("");
  const [P8_email, setP8_email] = useState("");
  const [P9_firstLanguageSpoken, setP9_firstLanguageSpoken] = useState("");
  const [P10_maritalStatus, setP10_maritalStatus] = useState("");
  const [P11_medicalIssue, setP11_medicalIssue] = useState("");
  const [P12_disability, setP12_disability] = useState("");
  const [P13_crimeConviction, setP13_crimeConviction] = useState("");
  const [P14_homeCountryAddress, setP14_homeCountryAddress] = useState("");
  const [P15_homeCountryPhoneNumber, setP15_homeCountryPhoneNumber] = useState("");
  const [P16_visaRefusal, setP16_visaRefusal] = useState("");
  const [P17_refusedEntry, setP17_refusedEntry] = useState("");
  // Add Function
  const addData = () => {
    const data = {
      P1_title,
      P2_familyName,
      P3_givenName,
      P4_countryOfBirth,
      P5_cityOfBirth,
      P6_countryOfCitizenship,
      P7_dualCitizen,
      P8_email,
      P9_firstLanguageSpoken,
      P10_maritalStatus,
      P11_medicalIssue,
      P12_disability,
      P13_crimeConviction,
      P14_homeCountryAddress,
      P15_homeCountryPhoneNumber,
      P16_visaRefusal,
      P17_refusedEntry,
    };
    personalDetailRef
      .set(data, { merge: true }) // Use merge option to merge the new data with existing data
      .then(() => {
        // Reset state values after adding data
        setP1_title("");
        setP2_familyName("");
        setP3_givenName("");
        setP4_countryOfBirth("");
        setP5_cityOfBirth("");
        setP6_countryOfCitizenship("");
        setP7_dualCitizen("");
        setP8_email("");
        setP9_firstLanguageSpoken("");
        setP10_maritalStatus("");
        setP11_medicalIssue("");
        setP12_disability("");
        setP13_crimeConviction("");
        setP14_homeCountryAddress("");
        setP15_homeCountryPhoneNumber("");
        setP16_visaRefusal("");
        setP17_refusedEntry("");
        Keyboard.dismiss();
        // Navigate to the next page or perform any other action
        navigation.navigate("Z_Test_3_A", { documentId: documentId });
      })
      .catch((err) => {
        alert(err);
      });
  }
  // ----------- Backend Part Logic -----------
  // Fonts
  const [fontsLoaded, setFontsLoaded] = useState(false);
  let [loaded] = useFonts({
    Archivo: require("../../assets/fonts/My_Soul/ArchivoBlack-Regular.ttf"),
    Kanit: require("../../assets/fonts/My_Soul/Kanit-Light.ttf"),
    Heebo: require("../../assets/fonts/My_Soul/Heebo-Medium.ttf"),
    HeeboExtra: require("../../assets/fonts/My_Soul/Heebo-ExtraBold.ttf"),
    KanitBold: require("../../assets/fonts/My_Soul/Kanit-Bold.ttf"),
    KanitBlack: require("../../assets/fonts/My_Soul/Kanit-Black.ttf"),
  });
  useEffect(() => {
    if (loaded) {
      setFontsLoaded(true);
    }
  }, [loaded]);
  if (!fontsLoaded) {
    return null;
  }
  // Main Body
  return (
    <View>
      <ScrollView>
        {/* Heading */}
        <Text style={styles.Txt1}>2 - Personal Detail</Text>
        {/* --- Main Body --- */}
        {/* 1 */}
        <Text style={styles.Detail_Txt}>Title</Text>
        <TextInput
          placeholder=" Enter Title "
          value={P1_title}
          onChangeText={(text) => setP1_title(text)}
          style={styles.Inp_1}
        />
        {/* 2 */}
        <Text style={styles.Detail_Txt}>Family Name as per Passport</Text>
        <TextInput
          placeholder=" Enter Family Name as per Passport "
          value={P2_familyName}
          onChangeText={(text) => setP2_familyName(text)}
          style={styles.Inp_1}
        />
        {/* 3 */}
        <Text style={styles.Detail_Txt}>Given Name as per Passport</Text>
        <TextInput
          placeholder=" Enter Given Name as per Passport "
          value={P3_givenName}
          onChangeText={(text) => setP3_givenName(text)}
          style={styles.Inp_1}
        />
        {/* 4 - Date */}
        {/* 5 - Gender */}
        {/* 6 */}
        <Text style={styles.Detail_Txt}>Country Of Birth</Text>
        <TextInput
          placeholder=" Enter Country Of Birth "
          value={P4_countryOfBirth}
          onChangeText={(text) => setP4_countryOfBirth(text)}
          style={styles.Inp_1}
        />
        {/* 7 */}
        <Text style={styles.Detail_Txt}>City Of Birth</Text>
        <TextInput
          placeholder=" Enter City Of Birth "
          value={P5_cityOfBirth}
          onChangeText={(text) => setP5_cityOfBirth(text)}
          style={styles.Inp_1}
        />
        {/* 8 */}
        <Text style={styles.Detail_Txt}>Country of Citizenship</Text>
        <TextInput
          placeholder=" Enter Country of Citizenship "
          value={P6_countryOfCitizenship}
          onChangeText={(text) => setP6_countryOfCitizenship(text)}
          style={styles.Inp_1}
        />
        {/* 9 */}
        <Text style={styles.Detail_Txt}>Dual Citizen</Text>
        <TextInput
          placeholder=" Enter Dual Citizen "
          value={P7_dualCitizen}
          onChangeText={(text) => setP7_dualCitizen(text)}
          style={styles.Inp_1}
        />
        {/* 10 */}
        <Text style={styles.Detail_Txt}>Email Address</Text>
        <TextInput
          placeholder=" Enter Email Address "
          value={P8_email}
          onChangeText={(text) => setP8_email(text)}
          style={styles.Inp_1}
        />
        {/* 11 */}
        <Text style={styles.Detail_Txt}>First Language Spoken</Text>
        <TextInput
          placeholder=" Enter First Language Spoken "
          value={P9_firstLanguageSpoken}
          onChangeText={(text) => setP9_firstLanguageSpoken(text)}
          style={styles.Inp_1}
        />
        {/* 12 */}
        <Text style={styles.Detail_Txt}>Marital Status</Text>
        <TextInput
          placeholder=" Enter Marital Status "
          value={P10_maritalStatus}
          onChangeText={(text) => setP10_maritalStatus(text)}
          style={styles.Inp_1}
        />
        {/* 13 */}
        <Text style={styles.Detail_Txt}>Have any medical or health issue that may prevent you from getting your visa</Text>
        <TextInput
          placeholder=" Enter Yes / No "
          value={P11_medicalIssue}
          onChangeText={(text) => setP11_medicalIssue(text)}
          style={styles.Inp_1}
        />
        {/* 14 */}
        <Text style={styles.Detail_Txt}>Do you have a disability, impairment, or long-term medical condition?</Text>
        <TextInput
          placeholder=" Enter Yes / No "
          value={P12_disability}
          onChangeText={(text) => setP12_disability(text)}
          style={styles.Inp_1}
        />
        {/* 14 */}
        <Text style={styles.Detail_Txt}>Been convicted of any crime or offence in any Country</Text>
        <TextInput
          placeholder=" Enter Yes / No "
          value={P13_crimeConviction}
          onChangeText={(text) => setP13_crimeConviction(text)}
          style={styles.Inp_1}
        />
        {/* 15 */}
        <Text style={styles.Detail_Txt}>Home Country Address with Suburb, City, State, Country & postcode</Text>
        <TextInput
          placeholder=" Enter Answer "
          value={P14_homeCountryAddress}
          onChangeText={(text) => setP14_homeCountryAddress(text)}
          style={styles.Inp_1}
        />
        {/* 16 */}
        <Text style={styles.Detail_Txt}>Home Country Phone Number with Area & Country Code</Text>
        <TextInput
          placeholder=" Enter Answer "
          value={P15_homeCountryPhoneNumber}
          onChangeText={(text) => setP15_homeCountryPhoneNumber(text)}
          style={styles.Inp_1}
          keyboardType="number-pad"
        />
        {/* 17 */}
        <Text style={styles.Detail_Txt}>Visa refusal of Australia</Text>
        <TextInput
          placeholder=" Enter Answer "
          value={P16_visaRefusal}
          onChangeText={(text) => setP16_visaRefusal(text)}
          style={styles.Inp_1}
        />
        {/* 18 */}
        <Text style={styles.Detail_Txt}>Been refused entry to any Country</Text>
        <TextInput
          placeholder=" Enter Answer "
          value={P17_refusedEntry}
          onChangeText={(text) => setP17_refusedEntry(text)}
          style={styles.Inp_1}
        />
        {/* ----- Button ----- */}
        {/* 1 Btn */}
        <TouchableOpacity style={styles.Btn_Parent} onPress={addData}>
          <Text style={styles.Btn_Txt}>Add Data</Text>
        </TouchableOpacity>
      </ScrollView>
    </View>
  );
}

// CSS
const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
  Txt1: {
    borderWidth: 1,
    borderColor: "yellow",
    backgroundColor: "yellow",
    fontFamily: "KanitBold",
    paddingHorizontal: 10,
    paddingVertical: 10,
    textAlign: "center",
    letterSpacing: 1.5,
    fontSize: 20,
    marginVertical: 25,
  },
  Detail_Txt: {
    marginTop: 1.5,
    paddingHorizontal: 25,
    fontFamily: "Heebo",
    fontSize: 12,
    letterSpacing: 1,
  },
  Inp_1: {
    marginTop: 1,
    borderWidth: 0.5,
    borderColor: "black",
    marginHorizontal: 25,
    borderRadius: 8,
    paddingHorizontal: 10,
    letterSpacing: 1.5,
    fontSize: 12,
    fontFamily: "Kanit",
  },
  Btn_Parent: {
    paddingVertical: 2,
    backgroundColor: "red",
    marginVertical: 20,
    marginHorizontal: 15,
    borderRadius: 20,
  },
  Btn_Parent_1: {
    paddingVertical: 2,
    backgroundColor: "blue",
    marginTop: 20,
    marginBottom: 30,
    marginHorizontal: 15,
    borderRadius: 20,
  },
  Btn_Txt: {
    paddingVertical: 2,
    textAlign: "center",
    fontFamily: "HeeboExtra",
    fontSize: 16,
    color: "white",
    letterSpacing: 1,
  },
});

----------------------------------------------------------------------------------

import React, { useState, useEffect } from 'react';
import { View, Text, TouchableOpacity, StyleSheet, TextInput, Keyboard, ScrollView } from 'react-native';
import { useFonts } from "expo-font";
// Firebase
import { firebase } from "../firestore";
import { useNavigation, useRoute } from '@react-navigation/native';

export default function Z_Test_3_A() {
  // Navigation
  const navigation = useNavigation();
  // ----------- Backend Part Logic -----------
  // Get the document ID passed from the previous page
  const route = useRoute();
  const { documentId } = route.params;
  const englishAbilityRef = firebase.firestore().collection("4 - Student Records").doc(documentId);
  const [info1, setInfo1] = useState("");
  const [info3, setInfo3] = useState("");
  const [info4, setInfo4] = useState("");
  const [info5, setInfo5] = useState("");
  const [info6, setInfo6] = useState("");
  const [info7, setInfo7] = useState("");
  const [info8, setInfo8] = useState("");
  const [info9, setInfo9] = useState("");
  // Add Function
  const addData = () => {
    const data = {
      E1_EnglishTestName: info1,
      E2_OverallScore: info3,
      E3_ListeningScore: info4,
      E4_ReadingScore: info5,
      E5_WritingScore: info6,
      E6_SpeakingScore: info7,
      E7_TestReferenceNumber: info8,
      E8_StudyInEnglish: info9,
    };
    englishAbilityRef
      .set(data, { merge: true }) // Use merge option to merge the new data with existing data
      .then(() => {
        setInfo1("");
        setInfo3("");
        setInfo4("");
        setInfo5("");
        setInfo6("");
        setInfo7("");
        setInfo8("");
        setInfo9("");
        Keyboard.dismiss();
        // Navigate to the next page or perform any other action
        navigation.navigate("Z_Test_Part_1", { documentId: documentId });
      })
      .catch((err) => {
        alert(err);
      });
  };
  // ----------- Backend Part Logic -----------
  // Fonts
  const [fontsLoaded, setFontsLoaded] = useState(false);
  let [loaded] = useFonts({
    Archivo: require("../../assets/fonts/My_Soul/ArchivoBlack-Regular.ttf"),
    Kanit: require("../../assets/fonts/My_Soul/Kanit-Light.ttf"),
    Heebo: require("../../assets/fonts/My_Soul/Heebo-Medium.ttf"),
    HeeboExtra: require("../../assets/fonts/My_Soul/Heebo-ExtraBold.ttf"),
    KanitBold: require("../../assets/fonts/My_Soul/Kanit-Bold.ttf"),
    KanitBlack: require("../../assets/fonts/My_Soul/Kanit-Black.ttf"),
  });
  useEffect(() => {
    if (loaded) {
      setFontsLoaded(true);
    }
  }, [loaded]);
  if (!fontsLoaded) {
    return null;
  }
  // Main Body
  return (
    <View>
      <ScrollView>
        {/* Heading */}
        <Text style={styles.Txt1}>3 - English Ability</Text>
        {/* --- Main Body --- */}
        {/* 1 */}
        <Text style={styles.inputTitleTxt}>English Test Name (PTE/IELTS)</Text>
        <TextInput
          placeholder=" Enter English Test Name (PTE/IELTS) "
          value={info1}
          onChangeText={(text) => setInfo1(text)}
          style={styles.inputTitle}
        />
        {/* 3 */}
        <Text style={styles.inputTitleTxt}>Overall Score</Text>
        <TextInput
          placeholder=" Enter Overall Score "
          value={info3}
          onChangeText={(text) => setInfo3(text)}
          style={styles.inputTitle}
          keyboardType="number-pad"
        />
        {/* 4 */}
        <Text style={styles.inputTitleTxt}>Listening Score</Text>
        <TextInput
          placeholder=" Enter Listening Score "
          value={info4}
          onChangeText={(text) => setInfo4(text)}
          style={styles.inputTitle}
          keyboardType="number-pad"
        />
        {/* 5 */}
        <Text style={styles.inputTitleTxt}>Reading Score</Text>
        <TextInput
          placeholder=" Enter Reading Score "
          value={info5}
          onChangeText={(text) => setInfo5(text)}
          style={styles.inputTitle}
          keyboardType="number-pad"
        />
        {/* 6 */}
        <Text style={styles.inputTitleTxt}>Writing Score</Text>
        <TextInput
          placeholder=" Enter Writing Score "
          value={info6}
          onChangeText={(text) => setInfo6(text)}
          style={styles.inputTitle}
          keyboardType="number-pad"
        />
        {/* 7 */}
        <Text style={styles.inputTitleTxt}>Speaking Score</Text>
        <TextInput
          placeholder=" Enter Speaking Score "
          value={info7}
          onChangeText={(text) => setInfo7(text)}
          style={styles.inputTitle}
          keyboardType="number-pad"
        />
        {/* 8 */}
        <Text style={styles.inputTitleTxt}>Test Reference Number</Text>
        <TextInput
          placeholder=" Enter Test Reference Number "
          value={info8}
          onChangeText={(text) => setInfo8(text)}
          style={styles.inputTitle}
        />
        {/* 9 */}
        <Text style={styles.inputTitleTxt}>Have you undertaken and completed any study where English is the language of instruction? </Text>
        <TextInput
          placeholder=" Enter Answer "
          value={info9}
          onChangeText={(text) => setInfo9(text)}
          style={styles.inputTitle}
        />
        {/* ----- Button ----- */}
        {/* 1 Btn */}
        <TouchableOpacity style={styles.Btn_Parent} onPress={addData}>
          <Text style={styles.Btn_Txt}>Add Data</Text>
        </TouchableOpacity>
      </ScrollView>
    </View>
  );
}

// CSS
const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
  Txt1: {
    borderWidth: 1,
    borderColor: "yellow",
    backgroundColor: "yellow",
    fontFamily: "KanitBold",
    paddingHorizontal: 10,
    paddingVertical: 10,
    textAlign: "center",
    letterSpacing: 1.5,
    fontSize: 20,
    marginVertical: 25,
  },
  inputTitleTxt: {
    marginTop: 1.5,
    paddingHorizontal: 25,
    fontFamily: "Heebo",
    fontSize: 12,
    letterSpacing: 1,
  },
  inputTitle: {
    marginTop: 1,
    borderWidth: 0.5,
    borderColor: "black",
    marginHorizontal: 25,
    borderRadius: 8,
    paddingHorizontal: 10,
    letterSpacing: 1.5,
    fontSize: 12,
    fontFamily: "Kanit",
  },
  Btn_Parent: {
    paddingVertical: 2,
    backgroundColor: "red",
    marginVertical: 20,
    marginHorizontal: 15,
    borderRadius: 20,
  },
  Btn_Parent_1: {
    paddingVertical: 2,
    backgroundColor: "blue",
    marginTop: 20,
    marginBottom: 30,
    marginHorizontal: 15,
    borderRadius: 20,
  },
  Btn_Txt: {
    paddingVertical: 2,
    textAlign: "center",
    fontFamily: "HeeboExtra",
    fontSize: 16,
    color: "white",
    letterSpacing: 1,
  },
});

----------------------------------------------------------------------------------

import React, { useState, useEffect } from 'react';
import { View, Text, TouchableOpacity, StyleSheet, TextInput, Keyboard, ScrollView } from 'react-native';
import { useFonts } from "expo-font";
// Firebase
import { firebase } from "../firestore";
import { useNavigation, useRoute } from '@react-navigation/native';

export default function Z_Test_Part_1() {
  // Navigation
  const navigation = useNavigation();
  // ----------- Backend Part Logic -----------
  // Get the document ID passed from the previous page
  const route = useRoute();
  const { documentId } = route.params;
  const educationDetailRef = firebase.firestore().collection("4 - Student Records").doc(documentId);
  const [info1, setInfo1] = useState("");
  const [info2, setInfo2] = useState("");
  const [info3, setInfo3] = useState("");
  const [info4, setInfo4] = useState("");
  const [info5, setInfo5] = useState("");
  const [info6, setInfo6] = useState("");
  const [info7, setInfo7] = useState("");
  const [info8, setInfo8] = useState("");
  const [info9, setInfo9] = useState("");
  const [info10, setInfo10] = useState("");
  // Add Function
  const addData = () => {
    const data = {
      ED1_HighSchoolYear12Equivalent: info1,
      ED2_SchoolName: info2,
      ED3_ProgramName: info3,
      ED4_Country: info4,
      ED5_CourseLengthMedium: info5,
      ED6_MonthYearStarted: info6,
      ED7_MonthYearFinished: info7,
      ED8_CompleteIncompleteWithdrawn: info8,
      ED9_IfIncompleteThenWhenFinish: info9,
      ED10_IfIncompleteThenResultAvailableDate: info10,
    };
    educationDetailRef
      .set(data, { merge: true }) // Use merge option to merge the new data with existing data
      .then(() => {
        setInfo1("");
        setInfo2("");
        setInfo3("");
        setInfo4("");
        setInfo5("");
        setInfo6("");
        setInfo7("");
        setInfo8("");
        setInfo9("");
        setInfo10("");
        Keyboard.dismiss();
        // Navigate to the next page or perform any other action
        navigation.navigate("Z_Test_Part_2", { documentId: documentId });
      })
      .catch((err) => {
        alert(err);
      });
  };
  // ----------- Backend Part Logic -----------
  // Fonts
  const [fontsLoaded, setFontsLoaded] = useState(false);
  let [loaded] = useFonts({
    Archivo: require("../../assets/fonts/My_Soul/ArchivoBlack-Regular.ttf"),
    Kanit: require("../../assets/fonts/My_Soul/Kanit-Light.ttf"),
    Heebo: require("../../assets/fonts/My_Soul/Heebo-Medium.ttf"),
    HeeboExtra: require("../../assets/fonts/My_Soul/Heebo-ExtraBold.ttf"),
    KanitBold: require("../../assets/fonts/My_Soul/Kanit-Bold.ttf"),
    KanitBlack: require("../../assets/fonts/My_Soul/Kanit-Black.ttf"),
  });
  useEffect(() => {
    if (loaded) {
      setFontsLoaded(true);
    }
  }, [loaded]);
  if (!fontsLoaded) {
    return null;
  }
  // Main Body
  return (
    <View>
      <ScrollView>
        {/* Heading */}
        <Text style={styles.Txt1}>4 - Education Detail</Text>
        {/* --- Main Body --- */}
        {/* 1 */}
        <Text style={styles.inputTitleTxt}>High School / Year 12 / Equivalent</Text>
        <TextInput
          placeholder=" Enter Answer "
          value={info1}
          onChangeText={(text) => setInfo1(text)}
          style={styles.inputTitle}
        />
        {/* 2 */}
        <Text style={styles.inputTitleTxt}>School Name</Text>
        <TextInput
          placeholder=" Enter School Name "
          value={info2}
          onChangeText={(text) => setInfo2(text)}
          style={styles.inputTitle}
        />
        {/* 3 */}
        <Text style={styles.inputTitleTxt}>Program Name</Text>
        <TextInput
          placeholder=" Enter Program Name "
          value={info3}
          onChangeText={(text) => setInfo3(text)}
          style={styles.inputTitle}
        />
        {/* 4 */}
        <Text style={styles.inputTitleTxt}>ED4_Country</Text>
        <TextInput
          placeholder=" Enter ED4_Country "
          value={info4}
          onChangeText={(text) => setInfo4(text)}
          style={styles.inputTitle}
        />
        {/* 5 */}
        <Text style={styles.inputTitleTxt}>Course Length, Medium (Language) of Instruction </Text>
        <TextInput
          placeholder=" Enter Answer "
          value={info5}
          onChangeText={(text) => setInfo5(text)}
          style={styles.inputTitle}
        />
        {/* 6 */}
        <Text style={styles.inputTitleTxt}>Month / Year Started</Text>
        <TextInput
          placeholder=" Enter Month / Year Started "
          value={info6}
          onChangeText={(text) => setInfo6(text)}
          style={styles.inputTitle}
        />
        {/* 7 */}
        <Text style={styles.inputTitleTxt}>Month / Year Finished</Text>
        <TextInput
          placeholder=" Enter Month / Year Finished "
          value={info7}
          onChangeText={(text) => setInfo7(text)}
          style={styles.inputTitle}
        />
        {/* 8 */}
        <Text style={styles.inputTitleTxt}>Complete or Incomplete or Withdrawn</Text>
        <TextInput
          placeholder=" Enter Answer "
          value={info8}
          onChangeText={(text) => setInfo8(text)}
          style={styles.inputTitle}
        />
        {/* 9 */}
        <Text style={styles.inputTitleTxt}>If incomplete then when will finish</Text>
        <TextInput
          placeholder=" Enter Answer "
          value={info9}
          onChangeText={(text) => setInfo9(text)}
          style={styles.inputTitle}
        />
        {/* 10 */}
        <Text style={styles.inputTitleTxt}>If incomplete then result available Date</Text>
        <TextInput
          placeholder=" Enter Answer "
          value={info10}
          onChangeText={(text) => setInfo10(text)}
          style={styles.inputTitle}
        />
        {/* ----- Button ----- */}
        {/* 1 Btn */}
        <TouchableOpacity style={styles.Btn_Parent} onPress={addData}>
          <Text style={styles.Btn_Txt}>Add Data</Text>
        </TouchableOpacity>
      </ScrollView>
    </View>
  );
}

// CSS
const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
  Txt1: {
    borderWidth: 1,
    borderColor: "yellow",
    backgroundColor: "yellow",
    fontFamily: "KanitBold",
    paddingHorizontal: 10,
    paddingVertical: 10,
    textAlign: "center",
    letterSpacing: 1.5,
    fontSize: 20,
    marginVertical: 25,
  },
  inputTitleTxt: {
    marginTop: 1.5,
    paddingHorizontal: 25,
    fontFamily: "Heebo",
    fontSize: 12,
    letterSpacing: 1,
  },
  inputTitle: {
    marginTop: 1,
    borderWidth: 0.5,
    borderColor: "black",
    marginHorizontal: 25,
    borderRadius: 8,
    paddingHorizontal: 10,
    letterSpacing: 1.5,
    fontSize: 12,
    fontFamily: "Kanit",
  },
  Btn_Parent: {
    paddingVertical: 2,
    backgroundColor: "red",
    marginVertical: 20,
    marginHorizontal: 15,
    borderRadius: 20,
  },
  Btn_Parent_1: {
    paddingVertical: 2,
    backgroundColor: "blue",
    marginTop: 20,
    marginBottom: 30,
    marginHorizontal: 15,
    borderRadius: 20,
  },
  Btn_Txt: {
    paddingVertical: 2,
    textAlign: "center",
    fontFamily: "HeeboExtra",
    fontSize: 16,
    color: "white",
    letterSpacing: 1,
  },
});

----------------------------------------------------------------------------------

import React, { useState, useEffect } from 'react';
import { View, Text, TouchableOpacity, StyleSheet, TextInput, Keyboard, ScrollView } from 'react-native';
import { useFonts } from "expo-font";
// Firebase
import { firebase } from "../firestore";
import { useNavigation, useRoute } from '@react-navigation/native';

export default function Z_Test_Part_2() {
  // Navigation
  const navigation = useNavigation();
  // ----------- Backend Part Logic -----------
  // Get the document ID passed from the previous page
  const route = useRoute();
  const { documentId } = route.params;
  const additionalDetailRef = firebase.firestore().collection("4 - Student Records").doc(documentId);
  const [info1, setInfo1] = useState("");
  const [info2, setInfo2] = useState("");
  const [info3, setInfo3] = useState("");
  const [info4, setInfo4] = useState("");
  // Add Function
  const addData = () => {
    const data = {
      A1_FathersHighestQualification: info1,
      A2_MothersHighestQualification: info2,
      A3_GrantedScholarshipBefore: info3,
      A4_ApplyingForScholarship: info4,
    };
    additionalDetailRef
      .set(data, { merge: true }) // Use merge option to merge the new data with existing data
      .then(() => {
        setInfo1("");
        setInfo2("");
        setInfo3("");
        setInfo4("");
        Keyboard.dismiss();
        // Navigate to the next page or perform any other action
        navigation.navigate("Z_Test_Part_3", { documentId: documentId });
      })
      .catch((err) => {
        alert(err);
      });
  };
  // ----------- Backend Part Logic -----------
  // Fonts
  const [fontsLoaded, setFontsLoaded] = useState(false);
  let [loaded] = useFonts({
    Archivo: require("../../assets/fonts/My_Soul/ArchivoBlack-Regular.ttf"),
    Kanit: require("../../assets/fonts/My_Soul/Kanit-Light.ttf"),
    Heebo: require("../../assets/fonts/My_Soul/Heebo-Medium.ttf"),
    HeeboExtra: require("../../assets/fonts/My_Soul/Heebo-ExtraBold.ttf"),
    KanitBold: require("../../assets/fonts/My_Soul/Kanit-Bold.ttf"),
    KanitBlack: require("../../assets/fonts/My_Soul/Kanit-Black.ttf"),
  });
  useEffect(() => {
    if (loaded) {
      setFontsLoaded(true);
    }
  }, [loaded]);
  if (!fontsLoaded) {
    return null;
  }
  // Main Body
  return (
    <View>
      <ScrollView>
        {/* Heading */}
        <Text style={styles.Txt1}>5 - Additional Detail</Text>
        {/* --- Main Body --- */}
        {/* 1 */}
        <Text style={styles.inputTitleTxt}>Father's Highest Qualification</Text>
        <TextInput
          placeholder=" Enter Answer "
          value={info1}
          onChangeText={(text) => setInfo1(text)}
          style={styles.inputTitle}
        />
        {/* 2 */}
        <Text style={styles.inputTitleTxt}>Mother's Highest Qualification</Text>
        <TextInput
          placeholder=" Enter Answer "
          value={info2}
          onChangeText={(text) => setInfo2(text)}
          style={styles.inputTitle}
        />
        {/* 3 */}
        <Text style={styles.inputTitleTxt}>Have you granted Scholarship (Government or Private) before</Text>
        <TextInput
          placeholder=" Enter Answer "
          value={info3}
          onChangeText={(text) => setInfo3(text)}
          style={styles.inputTitle}
        />
        {/* 4 */}
        <Text style={styles.inputTitleTxt}>Are you applying for Scholarship (Government or Private)</Text>
        <TextInput
          placeholder=" Enter Answer "
          value={info4}
          onChangeText={(text) => setInfo4(text)}
          style={styles.inputTitle}
        />
        {/* ----- Button ----- */}
        {/* 1 Btn */}
        <TouchableOpacity style={styles.Btn_Parent} onPress={addData}>
          <Text style={styles.Btn_Txt}>Add Data</Text>
        </TouchableOpacity>
      </ScrollView>
    </View>
  );
}

// CSS
const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
  Txt1: {
    borderWidth: 1,
    borderColor: "yellow",
    backgroundColor: "yellow",
    fontFamily: "KanitBold",
    paddingHorizontal: 10,
    paddingVertical: 10,
    textAlign: "center",
    letterSpacing: 1.5,
    fontSize: 20,
    marginVertical: 25,
  },
  inputTitleTxt: {
    marginTop: 1.5,
    paddingHorizontal: 25,
    fontFamily: "Heebo",
    fontSize: 12,
    letterSpacing: 1,
  },
  inputTitle: {
    marginTop: 1,
    borderWidth: 0.5,
    borderColor: "black",
    marginHorizontal: 25,
    borderRadius: 8,
    paddingHorizontal: 10,
    letterSpacing: 1.5,
    fontSize: 12,
    fontFamily: "Kanit",
  },
  Btn_Parent: {
    paddingVertical: 2,
    backgroundColor: "red",
    marginVertical: 20,
    marginHorizontal: 15,
    borderRadius: 20,
  },
  Btn_Parent_1: {
    paddingVertical: 2,
    backgroundColor: "blue",
    marginTop: 20,
    marginBottom: 30,
    marginHorizontal: 15,
    borderRadius: 20,
  },
  Btn_Txt: {
    paddingVertical: 2,
    textAlign: "center",
    fontFamily: "HeeboExtra",
    fontSize: 16,
    color: "white",
    letterSpacing: 1,
  },
});

----------------------------------------------------------------------------------

import React, { useState, useEffect } from 'react';
import { View, Text, TouchableOpacity, StyleSheet, TextInput, Keyboard, ScrollView } from 'react-native';
import { useFonts } from "expo-font";
// Firebase
import { firebase } from "../firestore";
import { useNavigation, useRoute } from '@react-navigation/native';

export default function Z_Test_Part_3() {
    // Navigation
    const navigation = useNavigation();
    // ----------- Backend Part Logic -----------
    // Get the document ID passed from the previous page
    const route = useRoute();
    const { documentId } = route.params;
    const bachelorDetailRef = firebase.firestore().collection("4 - Student Records").doc(documentId);
    const [info1, setInfo1] = useState("");
    const [info2, setInfo2] = useState("");
    const [info3, setInfo3] = useState("");
    const [info4, setInfo4] = useState("");
    const [info5, setInfo5] = useState("");
    const [info6, setInfo6] = useState("");
    const [info7, setInfo7] = useState("");
    const [info8, setInfo8] = useState("");
    const [info9, setInfo9] = useState("");
    const [info10, setInfo10] = useState("");
    const [info11, setInfo11] = useState("");
    // Add Function
    const addData = () => {
        const data = {
            B1_UniversityName: info1,
            B2_ProgramName: info2,
            B3_CourseLengthMedium: info3,
            B4_Country: info4,
            B5_MonthYearStarted: info5,
            B6_MonthYearFinished: info6,
            B7_CompleteIncompleteWithdrawn: info7,
            B8_IfIncompleteThenWhenFinish: info8,
            B9_IfIncompleteThenResultAvailableDate: info9,
            B10_ApplyingForCredits: info10,
            B11_CompletedMastersDegree: info11,
        };
        bachelorDetailRef
            .set(data, { merge: true }) // Use merge option to merge the new data with existing data
            .then(() => {
                setInfo1("");
                setInfo2("");
                setInfo3("");
                setInfo4("");
                setInfo5("");
                setInfo6("");
                setInfo7("");
                setInfo8("");
                setInfo9("");
                setInfo10("");
                setInfo11("");
                Keyboard.dismiss();
                // Navigate to the next page or perform any other action
                navigation.navigate("Z_Test_Part_D1", { documentId: documentId });
            })
            .catch((err) => {
                alert(err);
            });
    };
    // ----------- Backend Part Logic -----------
    // Fonts
    const [fontsLoaded, setFontsLoaded] = useState(false);
    let [loaded] = useFonts({
        Archivo: require("../../assets/fonts/My_Soul/ArchivoBlack-Regular.ttf"),
        Kanit: require("../../assets/fonts/My_Soul/Kanit-Light.ttf"),
        Heebo: require("../../assets/fonts/My_Soul/Heebo-Medium.ttf"),
        HeeboExtra: require("../../assets/fonts/My_Soul/Heebo-ExtraBold.ttf"),
        KanitBold: require("../../assets/fonts/My_Soul/Kanit-Bold.ttf"),
        KanitBlack: require("../../assets/fonts/My_Soul/Kanit-Black.ttf"),
    });
    useEffect(() => {
        if (loaded) {
            setFontsLoaded(true);
        }
    }, [loaded]);
    if (!fontsLoaded) {
        return null;
    }
    // Main Body
    return (
        <View>
            <ScrollView>
                {/* Heading */}
                <Text style={styles.Txt1}>6 - Bachelor Detail</Text>
                {/* --- Main Body --- */}
                {/* 1 */}
                <Text style={styles.inputTitleTxt}>University Name</Text>
                <TextInput
                    placeholder=" Enter University Name "
                    value={info1}
                    onChangeText={(text) => setInfo1(text)}
                    style={styles.inputTitle}
                />
                {/* 2 */}
                <Text style={styles.inputTitleTxt}>Program Name</Text>
                <TextInput
                    placeholder=" Enter Program Name "
                    value={info2}
                    onChangeText={(text) => setInfo2(text)}
                    style={styles.inputTitle}
                />
                {/* 3 */}
                <Text style={styles.inputTitleTxt}>Course Length - Medium (Language) of Instruction</Text>
                <TextInput
                    placeholder=" Enter Answer "
                    value={info3}
                    onChangeText={(text) => setInfo3(text)}
                    style={styles.inputTitle}
                />
                {/* 4 */}
                <Text style={styles.inputTitleTxt}>Country</Text>
                <TextInput
                    placeholder=" Enter Country "
                    value={info4}
                    onChangeText={(text) => setInfo4(text)}
                    style={styles.inputTitle}
                />
                {/* 5 */}
                <Text style={styles.inputTitleTxt}>Month / Year Started</Text>
                <TextInput
                    placeholder=" Enter Month / Year Started "
                    value={info5}
                    onChangeText={(text) => setInfo5(text)}
                    style={styles.inputTitle}
                />
                {/* 6 */}
                <Text style={styles.inputTitleTxt}>Month / Year Finished</Text>
                <TextInput
                    placeholder=" Enter Month / Year Finished "
                    value={info6}
                    onChangeText={(text) => setInfo6(text)}
                    style={styles.inputTitle}
                />
                {/* 7 */}
                <Text style={styles.inputTitleTxt}>Complete or Incomplete or Withdrawn</Text>
                <TextInput
                    placeholder=" Enter Answer "
                    value={info7}
                    onChangeText={(text) => setInfo7(text)}
                    style={styles.inputTitle}
                />
                {/* 8 */}
                <Text style={styles.inputTitleTxt}>If incomplete then when will finish</Text>
                <TextInput
                    placeholder=" Enter Answer "
                    value={info8}
                    onChangeText={(text) => setInfo8(text)}
                    style={styles.inputTitle}
                />
                {/* 9 */}
                <Text style={styles.inputTitleTxt}>If incomplete then result available Date</Text>
                <TextInput
                    placeholder=" Enter Answer "
                    value={info9}
                    onChangeText={(text) => setInfo9(text)}
                    style={styles.inputTitle}
                />
                {/* 10 */}
                <Text style={styles.inputTitleTxt}>Are you applying for Credits base on this study</Text>
                <TextInput
                    placeholder=" Enter Answer "
                    value={info10}
                    onChangeText={(text) => setInfo10(text)}
                    style={styles.inputTitle}
                />
                {/* 11 */}
                <Text style={styles.inputTitleTxt}>Have you completed a master's degree?</Text>
                <TextInput
                    placeholder=" Enter Answer "
                    value={info11}
                    onChangeText={(text) => setInfo11(text)}
                    style={styles.inputTitle}
                />
                {/* ----- Button ----- */}
                {/* 1 Btn */}
                <TouchableOpacity style={styles.Btn_Parent} onPress={addData}>
                    <Text style={styles.Btn_Txt}>Add Data</Text>
                </TouchableOpacity>
            </ScrollView>
        </View>
    );
}

// CSS
const styles = StyleSheet.create({
    container: {
        flex: 1,
        alignItems: 'center',
        justifyContent: 'center',
    },
    Txt1: {
        borderWidth: 1,
        borderColor: "yellow",
        backgroundColor: "yellow",
        fontFamily: "KanitBold",
        paddingHorizontal: 10,
        paddingVertical: 10,
        textAlign: "center",
        letterSpacing: 1.5,
        fontSize: 20,
        marginVertical: 25,
    },
    inputTitleTxt: {
        marginTop: 1.5,
        paddingHorizontal: 25,
        fontFamily: "Heebo",
        fontSize: 12,
        letterSpacing: 1,
    },
    inputTitle: {
        marginTop: 1,
        borderWidth: 0.5,
        borderColor: "black",
        marginHorizontal: 25,
        borderRadius: 8,
        paddingHorizontal: 10,
        letterSpacing: 1.5,
        fontSize: 12,
        fontFamily: "Kanit",
    },
    Btn_Parent: {
        paddingVertical: 2,
        backgroundColor: "red",
        marginVertical: 20,
        marginHorizontal: 15,
        borderRadius: 20,
    },
    Btn_Parent_1: {
        paddingVertical: 2,
        backgroundColor: "blue",
        marginTop: 20,
        marginBottom: 30,
        marginHorizontal: 15,
        borderRadius: 20,
    },
    Btn_Txt: {
        paddingVertical: 2,
        textAlign: "center",
        fontFamily: "HeeboExtra",
        fontSize: 16,
        color: "white",
        letterSpacing: 1,
    },
});

----------------------------------------------------------------------------------

import React, { useState, useEffect } from 'react';
import { View, Text, TouchableOpacity, StyleSheet, TextInput, Keyboard, ScrollView, Image } from 'react-native';
import { useFonts } from "expo-font";
import * as ImagePicker from 'expo-image-picker';
// Firebase
import { useNavigation, useRoute } from '@react-navigation/native';
import { firebase } from "../firestore";

export default function Z_Test_Part_D1() {
    // Navigation
    const navigation = useNavigation();
    // ------------------- Backend Logic & Image Upload Functions -------------------
    const route = useRoute();
    const { documentId } = route.params;
    const [image_10Mark, setImage_10Mark] = useState(null);
    const [image_10Cert, setImage_10Cert] = useState(null);
    const pickImage10Mark = async () => {
        let result = await ImagePicker.launchImageLibraryAsync({
            mediaTypes: ImagePicker.MediaTypeOptions.Images,
            allowsEditing: true,
            aspect: [4, 3],
            quality: 1,
        });
        if (!result.canceled && result.assets && result.assets.length > 0) {
            setImage_10Mark(result.assets[0].uri);
        }
    }
    const pickImage10Cert = async () => {
        let result = await ImagePicker.launchImageLibraryAsync({
            mediaTypes: ImagePicker.MediaTypeOptions.Images,
            allowsEditing: true,
            aspect: [4, 3],
            quality: 1,
        });
        if (!result.canceled && result.assets && result.assets.length > 0) {
            setImage_10Cert(result.assets[0].uri);
        }
    }
    const submitFiles = () => {
        const data = {
            D1_1_Image_10Mark: image_10Mark,
            D1_2_Image_10Cert: image_10Cert,
        };
        const studentRecordsRef = firebase.firestore().collection("4 - Student Records").doc(documentId);
        studentRecordsRef
            .set(data, { merge: true })
            .then(() => {
                setImage_10Mark(null);
                setImage_10Cert(null);
                Keyboard.dismiss();
                navigation.navigate("Z_Test_Part_D2", { documentId: documentId }); // Pass documentId here
            })
            .catch((err) => {
                alert(err);
            });
    };
    // ------------------- Backend Logic & Image Upload Functions -------------------
    // Expo Font Logic
    const [fontsLoaded, setFontsLoaded] = useState(false);
    let [loaded] = useFonts({
        Archivo: require("../../assets/fonts/My_Soul/ArchivoBlack-Regular.ttf"),
        Kanit: require("../../assets/fonts/My_Soul/Kanit-Light.ttf"),
        Heebo: require("../../assets/fonts/My_Soul/Heebo-Medium.ttf"),
        HeeboExtra: require("../../assets/fonts/My_Soul/Heebo-ExtraBold.ttf"),
        KanitBold: require("../../assets/fonts/My_Soul/Kanit-Bold.ttf"),
        KanitBlack: require("../../assets/fonts/My_Soul/Kanit-Black.ttf"),
    });
    // It Will Load Font
    useEffect(() => {
        if (loaded) {
            setFontsLoaded(true);
        }
    }, [loaded]);
    // It Tells If Font Is Loaded Or If Not Loaded Then Nothing Will Show,
    if (!fontsLoaded) {
        return null;
    }
    // Main Body
    return (
        <View>
            <ScrollView>
                {/* Heading */}
                <Text style={styles.Txt1}>1 - Class 10 Mark & Certif</Text>
                {/* --- Main Body --- */}
                {/* 1 */}
                <View style={styles.firstParent}>
                    <Text style={styles.fir}>10th Marksheet</Text>
                    <Text style={styles.firPar}>Kindly Upload Your 10th Class Marksheet In JPG / PNG Format.</Text>
                    {/* Image */}
                    <View style={styles.ParentImg}>
                        <Image source={{ uri: image_10Mark }} style={styles.image} />
                    </View>
                    {/* Upload Btn */}
                    <View style={styles.ParentBtn}>
                        <TouchableOpacity style={styles.btn1} onPress={pickImage10Mark}>
                            <Text style={styles.btnTxt}>Upload</Text>
                        </TouchableOpacity>
                    </View>
                </View>
                {/* 2 */}
                <View style={styles.line}></View>
                {/* 3 */}
                <View style={styles.firstParent}>
                    <Text style={styles.fir}>10th Certificate</Text>
                    <Text style={styles.firPar}>Kindly Upload Your 10th Class Certificate In JPG / PNG Format.</Text>
                    {/* Image */}
                    <View style={styles.ParentImg}>
                        <Image source={{ uri: image_10Cert }} style={styles.image} />
                    </View>
                    {/* Upload Btn */}
                    <View style={styles.ParentBtn}>
                        <TouchableOpacity style={styles.btn1} onPress={pickImage10Cert}>
                            <Text style={styles.btnTxt}>Upload</Text>
                        </TouchableOpacity>
                    </View>
                </View>
                {/* ----- Button ----- */}
                {/* Submit Button */}
                <TouchableOpacity style={styles.My_Submit_Btn} onPress={submitFiles}>
                    <Text style={styles.My_Submit_Btn_Txt}>Submit File</Text>
                </TouchableOpacity>
            </ScrollView>
        </View>
    );
}

// CSS
const styles = StyleSheet.create({
    container: {
        flex: 1,
        alignItems: 'center',
        justifyContent: 'center',
    },
    Txt1: {
        borderWidth: 1,
        borderColor: "yellow",
        backgroundColor: "yellow",
        fontFamily: "KanitBold",
        paddingHorizontal: 10,
        paddingVertical: 10,
        textAlign: "center",
        letterSpacing: 1.5,
        fontSize: 20,
        marginVertical: 25,
    },
    firstParent: {
        // borderWidth: 0.5,
        // borderColor: "red",
        padding: 10,
    },
    fir: {
        // borderWidth: 1,
        color: "black",
        fontSize: 20,
        marginTop: 15,
        marginBottom: 2,
        textAlign: "center",
        fontFamily: "HeeboExtra",
        letterSpacing: 1,
    },
    firPar: {
        // borderWidth: 0.5,
        fontFamily: "Kanit",
        textAlign: "center",
        paddingHorizontal: 25,
        color: "grey",
    },
    ParentImg: {
        // borderWidth: 0.5,
        paddingVertical: 20,
        justifyContent: "center",
        alignItems: "center",
    },
    image: {
        borderColor: "#EB2F06",
        borderWidth: 0.5,
        width: 100,
        height: 70,
        borderRadius: 10,
    },
    ParentBtn: {
        // borderWidth: 0.5,
        justifyContent: "center",
        alignItems: "center",
    },
    btn1: {
        borderColor: "#f39c12",
        paddingVertical: 4,
        width: "28%",
        borderWidth: 1,
        borderRadius: 10,
        backgroundColor: "#f39c12",
        marginVertical: 1,
    },
    btnTxt: {
        fontSize: 14,
        letterSpacing: 1.5,
        textAlign: "center",
        fontFamily: "Kanit",
    },
    line: {
        borderWidth: 0.5,
        marginTop: 23,
        marginHorizontal: 35,
        borderColor: "darkgrey",
    },
    My_Submit_Btn: {
        // borderWidth: 0.5,
        marginVertical: 15,
        width: "70%",
        alignSelf: "center",
        paddingVertical: 8,
        borderRadius: 50,
        backgroundColor: "#EB2F06"
    },
    My_Submit_Btn_Txt: {
        textAlign: "center",
        letterSpacing: 2.5,
        fontSize: 15,
        fontFamily: "HeeboExtra",
        color: "white",
        textTransform: "uppercase",
    },
});

----------------------------------------------------------------------------------

import React, { useState, useEffect } from 'react'
import { Text, View, StyleSheet, Image, TouchableOpacity, StatusBar } from 'react-native'
// Fonts
import { useFonts } from "expo-font";
import * as ImagePicker from 'expo-image-picker';
// Firebase
import { useNavigation, useRoute } from '@react-navigation/native';
import { firebase } from "../firestore";

export default function Z_Test_Part_D2() {
    // Navigation
    const navigation = useNavigation();
    // ------------------- Backend Logic & Image Upload Functions -------------------
    const route = useRoute();
    const documentId = route?.params?.documentId || null;
    const [image_11Mark, setImage_11Mark] = useState(null);
    const [image_11Cert, setImage_11Cert] = useState(null);
    const pickImage11Mark = async () => {
        let result = await ImagePicker.launchImageLibraryAsync({
            mediaTypes: ImagePicker.MediaTypeOptions.Images,
            allowsEditing: true,
            aspect: [4, 3],
            quality: 1,
        });
        if (!result.canceled && result.assets && result.assets.length > 0) {
            setImage_11Mark(result.assets[0].uri);
        }
    }
    const pickImage11Cert = async () => {
        let result = await ImagePicker.launchImageLibraryAsync({
            mediaTypes: ImagePicker.MediaTypeOptions.Images,
            allowsEditing: true,
            aspect: [4, 3],
            quality: 1,
        });
        if (!result.canceled && result.assets && result.assets.length > 0) {
            setImage_11Cert(result.assets[0].uri);
        }
    }
    const submitFiles = () => {
        console.log("Document ID from route params:", documentId);
        const data = {
            D2_1_Image_11Mark: image_11Mark,
            D2_2_Image_11Cert: image_11Cert,
        };
        if (documentId) {
            const studentRecordsRef = firebase.firestore().collection("4 - Student Records").doc(documentId);
            studentRecordsRef
                .set(data, { merge: true })
                .then(() => {
                    setImage_11Mark(null);
                    setImage_11Cert(null);
                    navigation.navigate("Z_Test_Part_D3", { documentId: documentId });
                })
                .catch((err) => {
                    alert(err);
                });
        } else {
            alert("Document ID is undefined. Check the navigation from Z_Test_Part_D1.");
        }
    };
    // ------------------- Backend Logic & Image Upload Functions -------------------
    // Expo Font Logic
    const [fontsLoaded, setFontsLoaded] = useState(false);
    let [loaded] = useFonts({
        Archivo: require("../../assets/fonts/My_Soul/ArchivoBlack-Regular.ttf"),
        Kanit: require("../../assets/fonts/My_Soul/Kanit-Light.ttf"),
        Heebo: require("../../assets/fonts/My_Soul/Heebo-Medium.ttf"),
        HeeboExtra: require("../../assets/fonts/My_Soul/Heebo-ExtraBold.ttf"),
        KanitBold: require("../../assets/fonts/My_Soul/Kanit-Bold.ttf"),
        KanitBlack: require("../../assets/fonts/My_Soul/Kanit-Black.ttf"),
    });
    // It Will Load Font
    useEffect(() => {
        if (loaded) {
            setFontsLoaded(true);
        }
    }, [loaded]);
    // It Tells If Font Is Loaded Or If Not Loaded Then Nothing Will Show,
    if (!fontsLoaded) {
        return null;
    }
    // Main Body
    return (
        <View style={styles.container}>
            {/* StatusBar */}
            <StatusBar backgroundColor={"#EB2F06"} />
            {/* 1 */}
            <View style={styles.firstParent}>
                <Text style={styles.fir}>11th Marksheet</Text>
                <Text style={styles.firPar}>Kindly Upload Your 11th Class Marksheet In JPG / PNG Format.</Text>
                {/* Image */}
                <View style={styles.ParentImg}>
                    <Image source={{ uri: image_11Mark }} style={styles.image} />
                </View>
                {/* Upload Btn */}
                <View style={styles.ParentBtn}>
                    <TouchableOpacity style={styles.btn1} onPress={pickImage11Mark}>
                        <Text style={styles.btnTxt}>Upload</Text>
                    </TouchableOpacity>
                </View>
            </View>
            {/* 2 */}
            <View style={styles.line}></View>
            {/* 3 */}
            <View style={styles.firstParent}>
                <Text style={styles.fir}>11th Certificate</Text>
                <Text style={styles.firPar}>Kindly Upload Your 11th Class Certificate In JPG / PNG Format.</Text>
                {/* Image */}
                <View style={styles.ParentImg}>
                    <Image source={{ uri: image_11Cert }} style={styles.image} />
                </View>
                {/* Upload Btn */}
                <View style={styles.ParentBtn}>
                    <TouchableOpacity style={styles.btn1} onPress={pickImage11Cert}>
                        <Text style={styles.btnTxt}>Upload</Text>
                    </TouchableOpacity>
                </View>
            </View>
            {/* Submit Button */}
            <TouchableOpacity style={styles.My_Submit_Btn} onPress={submitFiles}>
                <Text style={styles.My_Submit_Btn_Txt}>Submit File</Text>
            </TouchableOpacity>
        </View>
    );
}

// CSS
const styles = StyleSheet.create({
    container: {
        flex: 1,
        // backgroundColor:"white",
    },
    firstParent: {
        // borderWidth: 0.5,
        // borderColor: "red",
        padding: 10,
    },
    fir: {
        // borderWidth: 1,
        color: "black",
        fontSize: 20,
        marginTop: 15,
        marginBottom: 2,
        textAlign: "center",
        fontFamily: "HeeboExtra",
        letterSpacing: 1,
    },
    firPar: {
        // borderWidth: 0.5,
        fontFamily: "Kanit",
        textAlign: "center",
        paddingHorizontal: 25,
        color: "grey",
    },
    ParentImg: {
        // borderWidth: 0.5,
        paddingVertical: 20,
        justifyContent: "center",
        alignItems: "center",
    },
    image: {
        borderColor: "#EB2F06",
        borderWidth: 0.5,
        width: 100,
        height: 70,
        borderRadius: 10,
    },
    ParentBtn: {
        // borderWidth: 0.5,
        justifyContent: "center",
        alignItems: "center",
    },
    btn1: {
        borderColor: "#f39c12",
        paddingVertical: 4,
        width: "28%",
        borderWidth: 1,
        borderRadius: 10,
        backgroundColor: "#f39c12",
        marginVertical: 1,
    },
    btnTxt: {
        fontSize: 14,
        letterSpacing: 1.5,
        textAlign: "center",
        fontFamily: "Kanit",
    },
    line: {
        borderWidth: 0.5,
        marginTop: 23,
        marginHorizontal: 35,
        borderColor: "darkgrey",
    },
    My_Submit_Btn: {
        // borderWidth: 0.5,
        marginVertical: 15,
        width: "70%",
        alignSelf: "center",
        paddingVertical: 8,
        borderRadius: 50,
        backgroundColor: "#EB2F06"
    },
    My_Submit_Btn_Txt: {
        textAlign: "center",
        letterSpacing: 2.5,
        fontSize: 15,
        fontFamily: "HeeboExtra",
        color: "white",
        textTransform: "uppercase",
    },
})

----------------------------------------------------------------------------------

import React, { useState, useEffect } from 'react';
import { Text, View, StyleSheet, Image, TouchableOpacity, StatusBar } from 'react-native';
import { useFonts } from "expo-font";
import * as ImagePicker from 'expo-image-picker';
// Firebase
import { useNavigation, useRoute } from '@react-navigation/native';
import { firebase } from "../firestore";

export default function Z_Test_Part_D3() {
    // Navigation
    const navigation = useNavigation();
    // ------------------- Backend Logic & Image Upload Functions -------------------
    const route = useRoute();
    const documentId = route?.params?.documentId || null;
    const [image_Transcript, setImage_Transcript] = useState(null);
    const [image_Degree, setImage_Degree] = useState(null);
    const pickTranscript = async () => {
        let result = await ImagePicker.launchImageLibraryAsync({
            mediaTypes: ImagePicker.MediaTypeOptions.Images,
            allowsEditing: true,
            aspect: [4, 3],
            quality: 1,
        });
        if (!result.canceled && result.assets && result.assets.length > 0) {
            setImage_Transcript(result.assets[0].uri);
        }
    }
    const pickDegree = async () => {
        let result = await ImagePicker.launchImageLibraryAsync({
            mediaTypes: ImagePicker.MediaTypeOptions.Images,
            allowsEditing: true,
            aspect: [4, 3],
            quality: 1,
        });
        if (!result.canceled && result.assets && result.assets.length > 0) {
            setImage_Degree(result.assets[0].uri);
        }
    }
    const submitFiles = async () => {
        const data = {
            D3_1_Image_Transcript: image_Transcript,
            D3_2_Image_Degree: image_Degree,
        };
        if (documentId) {
            const studentRecordsRef = firebase.firestore().collection("4 - Student Records").doc(documentId);
            try {
                await Promise.all([
                    uploadImageToFirebase(documentId, 'D3_1_Image_Transcript', image_Transcript),
                    uploadImageToFirebase(documentId, 'D3_2_Image_Degree', image_Degree),
                    studentRecordsRef.set(data, { merge: true })
                ]);
                setImage_Transcript(null);
                setImage_Degree(null);
                // Navigate to the next screen if needed
                navigation.navigate("Z_Test_Part_D4", { documentId: documentId });
            } catch (err) {
                alert(err);
            }
        } else {
            alert("Document ID is undefined.");
        }
    };
    const uploadImageToFirebase = async (documentId, field, imageUri) => {
        const storageRef = firebase.storage().ref(`images/${documentId}/${field}`);
        const response = await fetch(imageUri);
        const blob = await response.blob();
        return storageRef.put(blob);
    };
    // ------------------- Backend Logic & Image Upload Functions -------------------
    // Expo Font Logic
    const [fontsLoaded, setFontsLoaded] = useState(false);
    let [loaded] = useFonts({
        Archivo: require("../../assets/fonts/My_Soul/ArchivoBlack-Regular.ttf"),
        Kanit: require("../../assets/fonts/My_Soul/Kanit-Light.ttf"),
        Heebo: require("../../assets/fonts/My_Soul/Heebo-Medium.ttf"),
        HeeboExtra: require("../../assets/fonts/My_Soul/Heebo-ExtraBold.ttf"),
        KanitBold: require("../../assets/fonts/My_Soul/Kanit-Bold.ttf"),
        KanitBlack: require("../../assets/fonts/My_Soul/Kanit-Black.ttf"),
    });
    // It Will Load Font
    useEffect(() => {
        if (loaded) {
            setFontsLoaded(true);
        }
    }, [loaded]);
    // It Tells If Font Is Loaded Or If Not Loaded Then Nothing Will Show,
    if (!fontsLoaded) {
        return null;
    }
    // Main Body
    return (
        <View style={styles.container}>
            {/* StatusBar */}
            <StatusBar backgroundColor={"#EB2F06"} />
            {/* 1 */}
            <View style={styles.firstParent}>
                <Text style={styles.fir}>Bachelor Transcript</Text>
                <Text style={styles.firPar}>Kindly Upload Your Bachelor Transcript In JPG / PNG Format.</Text>
                {/* Image */}
                <View style={styles.ParentImg}>
                    <Image source={{ uri: image_Transcript }} style={styles.image} />
                </View>
                {/* Upload Btn */}
                <View style={styles.ParentBtn}>
                    <TouchableOpacity style={styles.btn1} onPress={pickTranscript}>
                        <Text style={styles.btnTxt}>Upload</Text>
                    </TouchableOpacity>
                </View>
            </View>
            {/* 2 */}
            <View style={styles.line}></View>
            {/* 3 */}
            <View style={styles.firstParent}>
                <Text style={styles.fir}>Bachelor Degree</Text>
                <Text style={styles.firPar}>Kindly Upload Your Bachelor Degree In JPG / PNG Format.</Text>
                {/* Image */}
                <View style={styles.ParentImg}>
                    <Image source={{ uri: image_Degree }} style={styles.image} />
                </View>
                {/* Upload Btn */}
                <View style={styles.ParentBtn}>
                    <TouchableOpacity style={styles.btn1} onPress={pickDegree}>
                        <Text style={styles.btnTxt}>Upload</Text>
                    </TouchableOpacity>
                </View>
            </View>
            {/* Submit Button */}
            <TouchableOpacity style={styles.My_Submit_Btn} onPress={submitFiles}>
                <Text style={styles.My_Submit_Btn_Txt}>Submit File</Text>
            </TouchableOpacity>
        </View>
    );
}

// CSS
const styles = StyleSheet.create({
    container: {
        flex: 1,
        // backgroundColor:"white",
    },
    firstParent: {
        // borderWidth: 0.5,
        // borderColor: "red",
        padding: 10,
    },
    fir: {
        // borderWidth: 1,
        color: "black",
        fontSize: 20,
        marginTop: 15,
        marginBottom: 2,
        textAlign: "center",
        fontFamily: "HeeboExtra",
        letterSpacing: 1,
    },
    firPar: {
        // borderWidth: 0.5,
        fontFamily: "Kanit",
        textAlign: "center",
        paddingHorizontal: 25,
        color: "grey",
    },
    ParentImg: {
        // borderWidth: 0.5,
        paddingVertical: 20,
        justifyContent: "center",
        alignItems: "center",
    },
    image: {
        borderColor: "#EB2F06",
        borderWidth: 0.5,
        width: 100,
        height: 70,
        borderRadius: 10,
    },
    ParentBtn: {
        // borderWidth: 0.5,
        justifyContent: "center",
        alignItems: "center",
    },
    btn1: {
        borderColor: "#f39c12",
        paddingVertical: 4,
        width: "28%",
        borderWidth: 1,
        borderRadius: 10,
        backgroundColor: "#f39c12",
        marginVertical: 1,
    },
    btnTxt: {
        fontSize: 14,
        letterSpacing: 1.5,
        textAlign: "center",
        fontFamily: "Kanit",
    },
    line: {
        borderWidth: 0.5,
        marginTop: 23,
        marginHorizontal: 35,
        borderColor: "darkgrey",
    },
    My_Submit_Btn: {
        // borderWidth: 0.5,
        marginVertical: 15,
        width: "70%",
        alignSelf: "center",
        paddingVertical: 8,
        borderRadius: 50,
        backgroundColor: "#EB2F06"
    },
    My_Submit_Btn_Txt: {
        textAlign: "center",
        letterSpacing: 2.5,
        fontSize: 15,
        fontFamily: "HeeboExtra",
        color: "white",
        textTransform: "uppercase",
    },
})

----------------------------------------------------------------------------------

import React, { useState, useEffect } from 'react';
import { Text, View, StyleSheet, Image, TouchableOpacity, StatusBar } from 'react-native';
import { useFonts } from "expo-font";
import * as ImagePicker from 'expo-image-picker';
// Firebase
import { useNavigation, useRoute } from '@react-navigation/native';
import { firebase } from "../firestore";

export default function Z_Test_Part_D4() {
    // Navigation
    const navigation = useNavigation();
    // ------------------- Backend Logic & Image Upload Functions -------------------
    const route = useRoute();
    const documentId = route?.params?.documentId || null;
    const [image_Front, setImage_Front] = useState(null);
    const [image_Back, setImage_Back] = useState(null);
    const pickFront = async () => {
        let result = await ImagePicker.launchImageLibraryAsync({
            mediaTypes: ImagePicker.MediaTypeOptions.Images,
            allowsEditing: true,
            aspect: [4, 3],
            quality: 1,
        });
        if (!result.canceled && result.assets && result.assets.length > 0) {
            setImage_Front(result.assets[0].uri);
        }
    }
    const pickBack = async () => {
        let result = await ImagePicker.launchImageLibraryAsync({
            mediaTypes: ImagePicker.MediaTypeOptions.Images,
            allowsEditing: true,
            aspect: [4, 3],
            quality: 1,
        });
        if (!result.canceled && result.assets && result.assets.length > 0) {
            setImage_Back(result.assets[0].uri);
        }
    }
    const submitFiles = async () => {
        const data = {
            D4_1_Image_Front: image_Front,
            D4_2_Image_Back: image_Back,
        };
        if (documentId) {
            const studentRecordsRef = firebase.firestore().collection("4 - Student Records").doc(documentId);
            try {
                await Promise.all([
                    uploadImageToFirebase(documentId, 'D4_1_Image_Front', image_Front),
                    uploadImageToFirebase(documentId, 'D4_2_Image_Back', image_Back),
                    studentRecordsRef.set(data, { merge: true })
                ]);
                setImage_Front(null);
                setImage_Back(null);
                // Navigate to the next screen if needed
                navigation.navigate("Z_Test_Part_D5", { documentId: documentId });
            } catch (err) {
                alert(err);
            }
        } else {
            alert("Document ID is undefined.");
        }
    };
    const uploadImageToFirebase = async (documentId, field, imageUri) => {
        const storageRef = firebase.storage().ref(`images/${documentId}/${field}`);
        const response = await fetch(imageUri);
        const blob = await response.blob();
        return storageRef.put(blob);
    };
    // ------------------- Backend Logic & Image Upload Functions -------------------
    // Expo Font Logic
    const [fontsLoaded, setFontsLoaded] = useState(false);
    let [loaded] = useFonts({
        Archivo: require("../../assets/fonts/My_Soul/ArchivoBlack-Regular.ttf"),
        Kanit: require("../../assets/fonts/My_Soul/Kanit-Light.ttf"),
        Heebo: require("../../assets/fonts/My_Soul/Heebo-Medium.ttf"),
        HeeboExtra: require("../../assets/fonts/My_Soul/Heebo-ExtraBold.ttf"),
        KanitBold: require("../../assets/fonts/My_Soul/Kanit-Bold.ttf"),
        KanitBlack: require("../../assets/fonts/My_Soul/Kanit-Black.ttf"),
    });
    // It Will Load Font
    useEffect(() => {
        if (loaded) {
            setFontsLoaded(true);
        }
    }, [loaded]);
    // It Tells If Font Is Loaded Or If Not Loaded Then Nothing Will Show,
    if (!fontsLoaded) {
        return null;
    }
    // Main Body
    return (
        <View style={styles.container}>
            {/* StatusBar */}
            <StatusBar backgroundColor={"#EB2F06"} />
            {/* 1 */}
            <View style={styles.firstParent}>
                <Text style={styles.fir}>ID Card Front</Text>
                <Text style={styles.firPar}>Kindly Upload Your ID Card Front In JPG / PNG Format.</Text>
                {/* Image */}
                <View style={styles.ParentImg}>
                    <Image source={{ uri: image_Front }} style={styles.image} />
                </View>
                {/* Upload Btn */}
                <View style={styles.ParentBtn}>
                    <TouchableOpacity style={styles.btn1} onPress={pickFront}>
                        <Text style={styles.btnTxt}>Upload</Text>
                    </TouchableOpacity>
                </View>
            </View>
            {/* 2 */}
            <View style={styles.line}></View>
            {/* 3 */}
            <View style={styles.firstParent}>
                <Text style={styles.fir}>ID Card Back</Text>
                <Text style={styles.firPar}>Kindly Upload Your ID Card Back In JPG / PNG Format.</Text>
                {/* Image */}
                <View style={styles.ParentImg}>
                    <Image source={{ uri: image_Back }} style={styles.image} />
                </View>
                {/* Upload Btn */}
                <View style={styles.ParentBtn}>
                    <TouchableOpacity style={styles.btn1} onPress={pickBack}>
                        <Text style={styles.btnTxt}>Upload</Text>
                    </TouchableOpacity>
                </View>
            </View>
            {/* Submit Button */}
            <TouchableOpacity style={styles.My_Submit_Btn} onPress={submitFiles}>
                <Text style={styles.My_Submit_Btn_Txt}>Submit File</Text>
            </TouchableOpacity>
        </View>
    );
}

// CSS
const styles = StyleSheet.create({
    container: {
        flex: 1,
        // backgroundColor:"white",
    },
    firstParent: {
        // borderWidth: 0.5,
        // borderColor: "red",
        padding: 10,
    },
    fir: {
        // borderWidth: 1,
        color: "black",
        fontSize: 20,
        marginTop: 15,
        marginBottom: 2,
        textAlign: "center",
        fontFamily: "HeeboExtra",
        letterSpacing: 1,
    },
    firPar: {
        // borderWidth: 0.5,
        fontFamily: "Kanit",
        textAlign: "center",
        paddingHorizontal: 25,
        color: "grey",
    },
    ParentImg: {
        // borderWidth: 0.5,
        paddingVertical: 20,
        justifyContent: "center",
        alignItems: "center",
    },
    image: {
        borderColor: "#EB2F06",
        borderWidth: 0.5,
        width: 100,
        height: 70,
        borderRadius: 10,
    },
    ParentBtn: {
        // borderWidth: 0.5,
        justifyContent: "center",
        alignItems: "center",
    },
    btn1: {
        borderColor: "#f39c12",
        paddingVertical: 4,
        width: "28%",
        borderWidth: 1,
        borderRadius: 10,
        backgroundColor: "#f39c12",
        marginVertical: 1,
    },
    btnTxt: {
        fontSize: 14,
        letterSpacing: 1.5,
        textAlign: "center",
        fontFamily: "Kanit",
    },
    line: {
        borderWidth: 0.5,
        marginTop: 23,
        marginHorizontal: 35,
        borderColor: "darkgrey",
    },
    My_Submit_Btn: {
        // borderWidth: 0.5,
        marginVertical: 15,
        width: "70%",
        alignSelf: "center",
        paddingVertical: 8,
        borderRadius: 50,
        backgroundColor: "#EB2F06"
    },
    My_Submit_Btn_Txt: {
        textAlign: "center",
        letterSpacing: 2.5,
        fontSize: 15,
        fontFamily: "HeeboExtra",
        color: "white",
        textTransform: "uppercase",
    },
})

----------------------------------------------------------------------------------

import React, { useState, useEffect } from 'react';
import { Text, View, StyleSheet, Image, TouchableOpacity, StatusBar } from 'react-native';
import { useFonts } from "expo-font";
import * as ImagePicker from 'expo-image-picker';
// Firebase
import { useNavigation, useRoute } from '@react-navigation/native';
import { firebase } from "../firestore";

export default function Z_Test_Part_D5() {
    // Navigation
    const navigation = useNavigation();
    // ------------------- Backend Logic & Image Upload Functions -------------------
    const route = useRoute();
    const documentId = route?.params?.documentId || null;
    const [image_IELTS, setImage_IELTS] = useState(null);
    const pick_IELTS = async () => {
        let result = await ImagePicker.launchImageLibraryAsync({
            mediaTypes: ImagePicker.MediaTypeOptions.Images,
            allowsEditing: true,
            aspect: [4, 3],
            quality: 1,
        });
        if (!result.canceled && result.assets && result.assets.length > 0) {
            setImage_IELTS(result.assets[0].uri);
        }
    }
    const submitFiles = async () => {
        const data = {
            D5_1_Image_IELTS: image_IELTS,
        };
        if (documentId) {
            const studentRecordsRef = firebase.firestore().collection("4 - Student Records").doc(documentId);
            try {
                await Promise.all([
                    uploadImageToFirebase(documentId, 'D5_1_Image_IELTS', image_IELTS),
                    studentRecordsRef.set(data, { merge: true })
                ]);
                setImage_IELTS(null);
                // Navigate to the next screen if needed
                navigation.navigate("Z_Test_Part_D6", { documentId: documentId });

            } catch (err) {
                alert(err);
            }
        } else {
            alert("Document ID is undefined.");
        }
    };
    const uploadImageToFirebase = async (documentId, field, imageUri) => {
        const storageRef = firebase.storage().ref(`images/${documentId}/${field}`);
        const response = await fetch(imageUri);
        const blob = await response.blob();
        return storageRef.put(blob);
    };
    // ------------------- Backend Logic & Image Upload Functions -------------------
    // Expo Font Logic
    const [fontsLoaded, setFontsLoaded] = useState(false);
    let [loaded] = useFonts({
        Archivo: require("../../assets/fonts/My_Soul/ArchivoBlack-Regular.ttf"),
        Kanit: require("../../assets/fonts/My_Soul/Kanit-Light.ttf"),
        Heebo: require("../../assets/fonts/My_Soul/Heebo-Medium.ttf"),
        HeeboExtra: require("../../assets/fonts/My_Soul/Heebo-ExtraBold.ttf"),
        KanitBold: require("../../assets/fonts/My_Soul/Kanit-Bold.ttf"),
        KanitBlack: require("../../assets/fonts/My_Soul/Kanit-Black.ttf"),
    });
    // It Will Load Font
    useEffect(() => {
        if (loaded) {
            setFontsLoaded(true);
        }
    }, [loaded]);
    // It Tells If Font Is Loaded Or If Not Loaded Then Nothing Will Show,
    if (!fontsLoaded) {
        return null;
    }
    // Main Body
    return (
        <View style={styles.container}>
            {/* StatusBar */}
            <StatusBar backgroundColor={"#EB2F06"} />
            {/* 1 */}
            <View style={styles.firstParent}>
                <Text style={styles.fir}>IELTS Score Copy</Text>
                <Text style={styles.firPar}>Kindly Upload Your IELTS Score Copy In JPG / PNG Format.</Text>
                {/* Image */}
                <View style={styles.ParentImg}>
                    <Image source={{ uri: image_IELTS }} style={styles.image} />
                </View>
                {/* Upload Btn */}
                <View style={styles.ParentBtn}>
                    <TouchableOpacity style={styles.btn1} onPress={pick_IELTS}>
                        <Text style={styles.btnTxt}>Upload</Text>
                    </TouchableOpacity>
                </View>
            </View>
            {/* Submit Button */}
            <TouchableOpacity style={styles.My_Submit_Btn} onPress={submitFiles}>
                <Text style={styles.My_Submit_Btn_Txt}>Submit File</Text>
            </TouchableOpacity>
        </View>
    );
}

// CSS
const styles = StyleSheet.create({
    container: {
        flex: 1,
        // backgroundColor:"white",
    },
    firstParent: {
        // borderWidth: 0.5,
        // borderColor: "red",
        padding: 10,
    },
    fir: {
        // borderWidth: 1,
        color: "black",
        fontSize: 20,
        marginTop: 15,
        marginBottom: 2,
        textAlign: "center",
        fontFamily: "HeeboExtra",
        letterSpacing: 1,
    },
    firPar: {
        // borderWidth: 0.5,
        fontFamily: "Kanit",
        textAlign: "center",
        paddingHorizontal: 25,
        color: "grey",
    },
    ParentImg: {
        // borderWidth: 0.5,
        paddingVertical: 20,
        justifyContent: "center",
        alignItems: "center",
    },
    image: {
        borderColor: "#EB2F06",
        borderWidth: 0.5,
        width: 100,
        height: 70,
        borderRadius: 10,
    },
    ParentBtn: {
        // borderWidth: 0.5,
        justifyContent: "center",
        alignItems: "center",
    },
    btn1: {
        borderColor: "#f39c12",
        paddingVertical: 4,
        width: "28%",
        borderWidth: 1,
        borderRadius: 10,
        backgroundColor: "#f39c12",
        marginVertical: 1,
    },
    btnTxt: {
        fontSize: 14,
        letterSpacing: 1.5,
        textAlign: "center",
        fontFamily: "Kanit",
    },
    line: {
        borderWidth: 0.5,
        marginTop: 23,
        marginHorizontal: 35,
        borderColor: "darkgrey",
    },
    My_Submit_Btn: {
        // borderWidth: 0.5,
        marginVertical: 15,
        width: "70%",
        alignSelf: "center",
        paddingVertical: 8,
        borderRadius: 50,
        backgroundColor: "#EB2F06"
    },
    My_Submit_Btn_Txt: {
        textAlign: "center",
        letterSpacing: 2.5,
        fontSize: 15,
        fontFamily: "HeeboExtra",
        color: "white",
        textTransform: "uppercase",
    },
})

----------------------------------------------------------------------------------

import React, { useState, useEffect } from 'react';
import { Text, View, StyleSheet, Image, TouchableOpacity, StatusBar } from 'react-native';
import { useFonts } from "expo-font";
import * as ImagePicker from 'expo-image-picker';
// Firebase
import { useNavigation, useRoute } from '@react-navigation/native';
import { firebase } from "../firestore";

export default function D_Test_Part_D6() {
    // Navigation
    const navigation = useNavigation();
    // ------------------- Backend Logic & Image Upload Functions -------------------
    const route = useRoute();
    const documentId = route?.params?.documentId || null;
    const [image_Gap, setImage_Gap] = useState(null);
    const pick_Gap = async () => {
        let result = await ImagePicker.launchImageLibraryAsync({
            mediaTypes: ImagePicker.MediaTypeOptions.Images,
            allowsEditing: true,
            aspect: [4, 3],
            quality: 1,
        });
        if (!result.canceled && result.assets && result.assets.length > 0) {
            setImage_Gap(result.assets[0].uri);
        }
    }
    const submitFiles = async () => {
        const data = {
            D6_1_Image_Gap: image_Gap,
        };
        if (documentId) {
            const studentRecordsRef = firebase.firestore().collection("4 - Student Records").doc(documentId);
            try {
                await Promise.all([
                    uploadImageToFirebase(documentId, 'D6_1_Image_Gap', image_Gap),
                    studentRecordsRef.set(data, { merge: true })
                ]);
                setImage_Gap(null);
                // Navigate to the next screen if needed
                navigation.navigate("Z_Test_Part_D7", { documentId: documentId });
            } catch (err) {
                alert(err);
            }
        } else {
            alert("Document ID is undefined.");
        }
    };
    const uploadImageToFirebase = async (documentId, field, imageUri) => {
        const storageRef = firebase.storage().ref(`images/${documentId}/${field}`);
        const response = await fetch(imageUri);
        const blob = await response.blob();
        return storageRef.put(blob);
    };
    // ------------------- Backend Logic & Image Upload Functions -------------------
    // Expo Font Logic
    const [fontsLoaded, setFontsLoaded] = useState(false);
    let [loaded] = useFonts({
        Archivo: require("../../assets/fonts/My_Soul/ArchivoBlack-Regular.ttf"),
        Kanit: require("../../assets/fonts/My_Soul/Kanit-Light.ttf"),
        Heebo: require("../../assets/fonts/My_Soul/Heebo-Medium.ttf"),
        HeeboExtra: require("../../assets/fonts/My_Soul/Heebo-ExtraBold.ttf"),
        KanitBold: require("../../assets/fonts/My_Soul/Kanit-Bold.ttf"),
        KanitBlack: require("../../assets/fonts/My_Soul/Kanit-Black.ttf"),
    });
    // It Will Load Font
    useEffect(() => {
        if (loaded) {
            setFontsLoaded(true);
        }
    }, [loaded]);
    // It Tells If Font Is Loaded Or If Not Loaded Then Nothing Will Show,
    if (!fontsLoaded) {
        return null;
    }
    // Main Body
    return (
        <View style={styles.container}>
            {/* StatusBar */}
            <StatusBar backgroundColor={"#EB2F06"} />
            {/* 1 */}
            <View style={styles.firstParent}>
                <Text style={styles.fir}>Any Gap Proof</Text>
                <Text style={styles.firPar}>Kindly Upload Your Any Gap Proof Or Any Job Experienced Letter Or Any Short Course Certificate  In JPG / PNG Format.</Text>
                {/* Image */}
                <View style={styles.ParentImg}>
                    <Image source={{ uri: image_Gap }} style={styles.image} />
                </View>
                {/* Upload Btn */}
                <View style={styles.ParentBtn}>
                    <TouchableOpacity style={styles.btn1} onPress={pick_Gap}>
                        <Text style={styles.btnTxt}>Upload</Text>
                    </TouchableOpacity>
                </View>
            </View>
            {/* Submit Button */}
            <TouchableOpacity style={styles.My_Submit_Btn} onPress={submitFiles}>
                <Text style={styles.My_Submit_Btn_Txt}>Submit File</Text>
            </TouchableOpacity>
        </View>
    );
}

// CSS
const styles = StyleSheet.create({
    container: {
        flex: 1,
        // backgroundColor:"white",
    },
    firstParent: {
        // borderWidth: 0.5,
        // borderColor: "red",
        padding: 10,
    },
    fir: {
        // borderWidth: 1,
        color: "black",
        fontSize: 20,
        marginTop: 15,
        marginBottom: 2,
        textAlign: "center",
        fontFamily: "HeeboExtra",
        letterSpacing: 1,
    },
    firPar: {
        // borderWidth: 0.5,
        fontFamily: "Kanit",
        textAlign: "center",
        paddingHorizontal: 25,
        color: "grey",
    },
    ParentImg: {
        // borderWidth: 0.5,
        paddingVertical: 20,
        justifyContent: "center",
        alignItems: "center",
    },
    image: {
        borderColor: "#EB2F06",
        borderWidth: 0.5,
        width: 100,
        height: 70,
        borderRadius: 10,
    },
    ParentBtn: {
        // borderWidth: 0.5,
        justifyContent: "center",
        alignItems: "center",
    },
    btn1: {
        borderColor: "#f39c12",
        paddingVertical: 4,
        width: "28%",
        borderWidth: 1,
        borderRadius: 10,
        backgroundColor: "#f39c12",
        marginVertical: 1,
    },
    btnTxt: {
        fontSize: 14,
        letterSpacing: 1.5,
        textAlign: "center",
        fontFamily: "Kanit",
    },
    line: {
        borderWidth: 0.5,
        marginTop: 23,
        marginHorizontal: 35,
        borderColor: "darkgrey",
    },
    My_Submit_Btn: {
        // borderWidth: 0.5,
        marginVertical: 15,
        width: "70%",
        alignSelf: "center",
        paddingVertical: 8,
        borderRadius: 50,
        backgroundColor: "#EB2F06"
    },
    My_Submit_Btn_Txt: {
        textAlign: "center",
        letterSpacing: 2.5,
        fontSize: 15,
        fontFamily: "HeeboExtra",
        color: "white",
        textTransform: "uppercase",
    },
})

----------------------------------------------------------------------------------

import React, { useState, useEffect } from 'react';
import { Text, View, StyleSheet, Image, TouchableOpacity, StatusBar } from 'react-native';
import { useFonts } from "expo-font";
import * as ImagePicker from 'expo-image-picker';
// Firebase
import { useNavigation, useRoute } from '@react-navigation/native';
import { firebase } from "../firestore";

export default function Z_Test_Part_D7() {
    // Navigation
    const navigation = useNavigation();
    // ------------------- Backend Logic & Image Upload Functions -------------------
    const route = useRoute();
    const documentId = route?.params?.documentId || null;
    const [image_Resume, setImage_Resume] = useState(null);
    const pick_Resume = async () => {
        let result = await ImagePicker.launchImageLibraryAsync({
            mediaTypes: ImagePicker.MediaTypeOptions.Images,
            allowsEditing: true,
            aspect: [4, 3],
            quality: 1,
        });
        if (!result.canceled && result.assets && result.assets.length > 0) {
            setImage_Resume(result.assets[0].uri);
        }
    }
    const submitFiles = async () => {
        const data = {
            D7_1_Image_Resume: image_Resume,
        };
        if (documentId) {
            const studentRecordsRef = firebase.firestore().collection("4 - Student Records").doc(documentId);
            try {
                await Promise.all([
                    uploadImageToFirebase(documentId, 'D7_1_Image_Resume', image_Resume),
                    studentRecordsRef.set(data, { merge: true })
                ]);
                setImage_Resume(null);
                // Navigate to the next screen if needed
                navigation.navigate("Z_Test_Part_D8", { documentId: documentId });

            } catch (err) {
                alert(err);
            }
        } else {
            alert("Document ID is undefined.");
        }
    };
    const uploadImageToFirebase = async (documentId, field, imageUri) => {
        const storageRef = firebase.storage().ref(`images/${documentId}/${field}`);
        const response = await fetch(imageUri);
        const blob = await response.blob();
        return storageRef.put(blob);
    };
    // ------------------- Backend Logic & Image Upload Functions -------------------
    // Expo Font Logic
    const [fontsLoaded, setFontsLoaded] = useState(false);
    let [loaded] = useFonts({
        Archivo: require("../../assets/fonts/My_Soul/ArchivoBlack-Regular.ttf"),
        Kanit: require("../../assets/fonts/My_Soul/Kanit-Light.ttf"),
        Heebo: require("../../assets/fonts/My_Soul/Heebo-Medium.ttf"),
        HeeboExtra: require("../../assets/fonts/My_Soul/Heebo-ExtraBold.ttf"),
        KanitBold: require("../../assets/fonts/My_Soul/Kanit-Bold.ttf"),
        KanitBlack: require("../../assets/fonts/My_Soul/Kanit-Black.ttf"),
    });
    // It Will Load Font
    useEffect(() => {
        if (loaded) {
            setFontsLoaded(true);
        }
    }, [loaded]);
    // It Tells If Font Is Loaded Or If Not Loaded Then Nothing Will Show,
    if (!fontsLoaded) {
        return null;
    }
    // Main Body
    return (
        <View style={styles.container}>
            {/* StatusBar */}
            <StatusBar backgroundColor={"#EB2F06"} />
            {/* 1 */}
            <View style={styles.firstParent}>
                <Text style={styles.fir}>Updated Resume</Text>
                <Text style={styles.firPar}>Kindly Upload Your Latest Fresh Resume In JPG / PNG Format.</Text>
                {/* Image */}
                <View style={styles.ParentImg}>
                    <Image source={{ uri: image_Resume }} style={styles.image} />
                </View>
                {/* Upload Btn */}
                <View style={styles.ParentBtn}>
                    <TouchableOpacity style={styles.btn1} onPress={pick_Resume}>
                        <Text style={styles.btnTxt}>Upload</Text>
                    </TouchableOpacity>
                </View>
            </View>
            {/* Submit Button */}
            <TouchableOpacity style={styles.My_Submit_Btn} onPress={submitFiles}>
                <Text style={styles.My_Submit_Btn_Txt}>Submit File</Text>
            </TouchableOpacity>
        </View>
    );
}

// CSS
const styles = StyleSheet.create({
    container: {
        flex: 1,
        // backgroundColor:"white",
    },
    firstParent: {
        // borderWidth: 0.5,
        // borderColor: "red",
        padding: 10,
    },
    fir: {
        // borderWidth: 1,
        color: "black",
        fontSize: 20,
        marginTop: 15,
        marginBottom: 2,
        textAlign: "center",
        fontFamily: "HeeboExtra",
        letterSpacing: 1,
    },
    firPar: {
        // borderWidth: 0.5,
        fontFamily: "Kanit",
        textAlign: "center",
        paddingHorizontal: 25,
        color: "grey",
    },
    ParentImg: {
        // borderWidth: 0.5,
        paddingVertical: 20,
        justifyContent: "center",
        alignItems: "center",
    },
    image: {
        borderColor: "#EB2F06",
        borderWidth: 0.5,
        width: 100,
        height: 70,
        borderRadius: 10,
    },
    ParentBtn: {
        // borderWidth: 0.5,
        justifyContent: "center",
        alignItems: "center",
    },
    btn1: {
        borderColor: "#f39c12",
        paddingVertical: 4,
        width: "28%",
        borderWidth: 1,
        borderRadius: 10,
        backgroundColor: "#f39c12",
        marginVertical: 1,
    },
    btnTxt: {
        fontSize: 14,
        letterSpacing: 1.5,
        textAlign: "center",
        fontFamily: "Kanit",
    },
    line: {
        borderWidth: 0.5,
        marginTop: 23,
        marginHorizontal: 35,
        borderColor: "darkgrey",
    },
    My_Submit_Btn: {
        // borderWidth: 0.5,
        marginVertical: 15,
        width: "70%",
        alignSelf: "center",
        paddingVertical: 8,
        borderRadius: 50,
        backgroundColor: "#EB2F06"
    },
    My_Submit_Btn_Txt: {
        textAlign: "center",
        letterSpacing: 2.5,
        fontSize: 15,
        fontFamily: "HeeboExtra",
        color: "white",
        textTransform: "uppercase",
    },
})

----------------------------------------------------------------------------------

import React, { useState, useEffect } from 'react';
import { Text, View, StyleSheet, Image, TouchableOpacity, StatusBar } from 'react-native';
import { useFonts } from "expo-font";
import * as ImagePicker from 'expo-image-picker';
// Firebase
import { useNavigation, useRoute } from '@react-navigation/native';
import { firebase } from "../firestore";

export default function Z_Test_Part_D8() {
    // Navigation
    const navigation = useNavigation();
    // ------------------- Backend Logic & Image Upload Functions -------------------
    const route = useRoute();
    const documentId = route?.params?.documentId || null;
    const [image_PassFirst, setImage_PassFirst] = useState(null);
    const [image_PassSign, setImage_PassSign] = useState(null);
    const pick_PassFirst = async () => {
        let result = await ImagePicker.launchImageLibraryAsync({
            mediaTypes: ImagePicker.MediaTypeOptions.Images,
            allowsEditing: true,
            aspect: [4, 3],
            quality: 1,
        });
        if (!result.canceled && result.assets && result.assets.length > 0) {
            setImage_PassFirst(result.assets[0].uri);
        }
    }
    const pick_PassSign = async () => {
        let result = await ImagePicker.launchImageLibraryAsync({
            mediaTypes: ImagePicker.MediaTypeOptions.Images,
            allowsEditing: true,
            aspect: [4, 3],
            quality: 1,
        });
        if (!result.canceled && result.assets && result.assets.length > 0) {
            setImage_PassSign(result.assets[0].uri);
        }
    }
    const submitFiles = async () => {
        const data = {
            D8_1_Image_PassFirst: image_PassFirst,
            D8_2_Image_PassSign: image_PassSign,
        };
        if (documentId) {
            const studentRecordsRef = firebase.firestore().collection("4 - Student Records").doc(documentId);
            try {
                await Promise.all([
                    uploadImageToFirebase(documentId, 'D8_1_Image_PassFirst', image_PassFirst),
                    uploadImageToFirebase(documentId, 'D8_2_Image_PassSign', image_PassSign),
                    studentRecordsRef.set(data, { merge: true })
                ]);
                setImage_PassFirst(null);
                setImage_PassSign(null);
                // Navigate to the next screen if needed
                navigation.navigate("Z_Test_1_A", { documentId: documentId });
                // --- Make Changes To Confirmation Page ( Rememeber ) ---
            } catch (err) {
                alert(err);
            }
        } else {
            alert("Document ID is undefined.");
        }
    };
    const uploadImageToFirebase = async (documentId, field, imageUri) => {
        const storageRef = firebase.storage().ref(`images/${documentId}/${field}`);
        const response = await fetch(imageUri);
        const blob = await response.blob();

        return storageRef.put(blob);
    };
    // ------------------- Backend Logic & Image Upload Functions -------------------
    // Expo Font Logic
    const [fontsLoaded, setFontsLoaded] = useState(false);
    let [loaded] = useFonts({
        Archivo: require("../../assets/fonts/My_Soul/ArchivoBlack-Regular.ttf"),
        Kanit: require("../../assets/fonts/My_Soul/Kanit-Light.ttf"),
        Heebo: require("../../assets/fonts/My_Soul/Heebo-Medium.ttf"),
        HeeboExtra: require("../../assets/fonts/My_Soul/Heebo-ExtraBold.ttf"),
        KanitBold: require("../../assets/fonts/My_Soul/Kanit-Bold.ttf"),
        KanitBlack: require("../../assets/fonts/My_Soul/Kanit-Black.ttf"),
    });
    // It Will Load Font
    useEffect(() => {
        if (loaded) {
            setFontsLoaded(true);
        }
    }, [loaded]);
    // It Tells If Font Is Loaded Or If Not Loaded Then Nothing Will Show,
    if (!fontsLoaded) {
        return null;
    }    // Main Body
    return (
        <View style={styles.container}>
            {/* StatusBar */}
            <StatusBar backgroundColor={"#EB2F06"} />
            {/* 1 */}
            <View style={styles.firstParent}>
                <Text style={styles.fir}>Passport First Page</Text>
                <Text style={styles.firPar}>Kindly Upload Your Passport First Page In JPG / PNG Format.</Text>
                {/* Image */}
                <View style={styles.ParentImg}>
                    <Image source={{ uri: image_PassFirst }} style={styles.image} />
                </View>
                {/* Upload Btn */}
                <View style={styles.ParentBtn}>
                    <TouchableOpacity style={styles.btn1} onPress={pick_PassFirst}>
                        <Text style={styles.btnTxt}>Upload</Text>
                    </TouchableOpacity>
                </View>
            </View>
            {/* 2 */}
            <View style={styles.line}></View>
            {/* 3 */}
            <View style={styles.firstParent}>
                <Text style={styles.fir}>Passport Signed Page</Text>
                <Text style={styles.firPar}>Kindly Upload Your Passport Signed Page In JPG / PNG Format.</Text>
                {/* Image */}
                <View style={styles.ParentImg}>
                    <Image source={{ uri: image_PassSign }} style={styles.image} />
                </View>
                {/* Upload Btn */}
                <View style={styles.ParentBtn}>
                    <TouchableOpacity style={styles.btn1} onPress={pick_PassSign}>
                        <Text style={styles.btnTxt}>Upload</Text>
                    </TouchableOpacity>
                </View>
            </View>
            {/* Submit Button */}
            <TouchableOpacity style={styles.My_Submit_Btn} onPress={submitFiles}>
                <Text style={styles.My_Submit_Btn_Txt}>Submit File</Text>
            </TouchableOpacity>
        </View>
    );
}

// CSS
const styles = StyleSheet.create({
    container: {
        flex: 1,
        // backgroundColor:"white",
    },
    firstParent: {
        // borderWidth: 0.5,
        // borderColor: "red",
        padding: 10,
    },
    fir: {
        // borderWidth: 1,
        color: "black",
        fontSize: 20,
        marginTop: 15,
        marginBottom: 2,
        textAlign: "center",
        fontFamily: "HeeboExtra",
        letterSpacing: 1,
    },
    firPar: {
        // borderWidth: 0.5,
        fontFamily: "Kanit",
        textAlign: "center",
        paddingHorizontal: 25,
        color: "grey",
    },
    ParentImg: {
        // borderWidth: 0.5,
        paddingVertical: 20,
        justifyContent: "center",
        alignItems: "center",
    },
    image: {
        borderColor: "#EB2F06",
        borderWidth: 0.5,
        width: 100,
        height: 70,
        borderRadius: 10,
    },
    ParentBtn: {
        // borderWidth: 0.5,
        justifyContent: "center",
        alignItems: "center",
    },
    btn1: {
        borderColor: "#f39c12",
        paddingVertical: 4,
        width: "28%",
        borderWidth: 1,
        borderRadius: 10,
        backgroundColor: "#f39c12",
        marginVertical: 1,
    },
    btnTxt: {
        fontSize: 14,
        letterSpacing: 1.5,
        textAlign: "center",
        fontFamily: "Kanit",
    },
    line: {
        borderWidth: 0.5,
        marginTop: 23,
        marginHorizontal: 35,
        borderColor: "darkgrey",
    },
    My_Submit_Btn: {
        // borderWidth: 0.5,
        marginVertical: 15,
        width: "70%",
        alignSelf: "center",
        paddingVertical: 8,
        borderRadius: 50,
        backgroundColor: "#EB2F06"
    },
    My_Submit_Btn_Txt: {
        textAlign: "center",
        letterSpacing: 2.5,
        fontSize: 15,
        fontFamily: "HeeboExtra",
        color: "white",
        textTransform: "uppercase",
    },
})

----------------------------------------------------------------------------------

